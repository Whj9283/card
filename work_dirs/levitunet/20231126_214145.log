2023-11-26 21:41:45,569 - mmseg - INFO - Multi-processing start method is `None`
2023-11-26 21:41:45,570 - mmseg - INFO - OpenCV num_threads is `6
2023-11-26 21:41:45,633 - mmseg - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.18 (default, Sep 11 2023, 13:40:15) [GCC 11.2.0]
CUDA available: True
GPU 0: NVIDIA GeForce RTX 3090
CUDA_HOME: /environment/miniconda3
NVCC: Cuda compilation tools, release 11.8, V11.8.89
GCC: gcc (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0
PyTorch: 1.11.0+cu113
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

TorchVision: 0.12.0+cu113
OpenCV: 4.8.1
MMCV: 1.7.0
MMCV Compiler: GCC 9.3
MMCV CUDA Compiler: 11.3
MMSegmentation: 0.29.1+
------------------------------------------------------------

2023-11-26 21:41:45,633 - mmseg - INFO - Distributed training: False
2023-11-26 21:41:45,834 - mmseg - INFO - Config:
norm_cfg = dict(type='SyncBN', requires_grad=True)
backbone_norm_cfg = dict(type='LN', requires_grad=True)
model = dict(
    type='EncoderDecoderFull',
    decode_head=dict(
        type='LevitUnet',
        loss_decode=[
            dict(
                type='FocalLoss',
                use_sigmoid=True,
                gamma=2.0,
                alpha=0.25,
                class_weight=[0.1, 0.5, 0.2, 0.2],
                loss_weight=2.0),
            dict(
                type='DiceLoss',
                loss_name='loss_dice',
                class_weight=[0.1, 0.5, 0.2, 0.2],
                loss_weight=2.0)
        ]))
train_cfg = dict()
test_cfg = dict(mode='whole')
dataset_type = 'MyDataset'
crop_size = (512, 512)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations'),
    dict(type='Resize', img_scale=(600, 600)),
    dict(type='RandomCrop', crop_size=(512, 512), cat_max_ratio=0.75),
    dict(type='RandomFlip', flip_ratio=0.5),
    dict(type='PhotoMetricDistortion'),
    dict(type='Normalize', mean=[0, 0, 0], std=[1, 1, 1], to_rgb=True),
    dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_semantic_seg'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(512, 512),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=False),
            dict(type='Normalize', mean=[0, 0, 0], std=[1, 1, 1], to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
data_root = './datasets/'
data = dict(
    samples_per_gpu=8,
    workers_per_gpu=2,
    train=dict(
        type='MyDataset',
        data_root='./datasets/',
        img_dir='train/images',
        ann_dir='train/labels',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations'),
            dict(type='Resize', img_scale=(600, 600)),
            dict(type='RandomCrop', crop_size=(512, 512), cat_max_ratio=0.75),
            dict(type='RandomFlip', flip_ratio=0.5),
            dict(type='PhotoMetricDistortion'),
            dict(type='Normalize', mean=[0, 0, 0], std=[1, 1, 1], to_rgb=True),
            dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),
            dict(type='DefaultFormatBundle'),
            dict(type='Collect', keys=['img', 'gt_semantic_seg'])
        ]),
    val=dict(
        type='MyDataset',
        data_root='./datasets/',
        img_dir='test/images',
        ann_dir='test/labels',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(512, 512),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=False),
                    dict(
                        type='Normalize',
                        mean=[0, 0, 0],
                        std=[1, 1, 1],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]),
    test=dict(
        type='MyDataset',
        data_root='./datasets/',
        img_dir='test/images',
        ann_dir='test/labels',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(512, 512),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=False),
                    dict(
                        type='Normalize',
                        mean=[0, 0, 0],
                        std=[1, 1, 1],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]))
log_config = dict(
    interval=50,
    hooks=[
        dict(type='TensorboardLoggerHook'),
        dict(type='TextLoggerHook', by_epoch=False)
    ])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
cudnn_benchmark = False
find_unused_parameters = True
optimizer = dict(type='Adam', lr=0.0001, betas=(0.9, 0.999))
optimizer_config = dict()
lr_config = dict(policy='poly', power=0.9, min_lr=1e-05, by_epoch=False)
runner = dict(type='IterBasedRunner', max_iters=5000)
checkpoint_config = dict(by_epoch=False, save_optimizer=False, interval=5000)
evaluation = dict(interval=500, metric=['mIoU', 'mFscore', 'mDice'])
work_dir = './work_dirs/levitunet'
gpu_ids = [0]
auto_resume = False

2023-11-26 21:41:45,835 - mmseg - INFO - Set random seed to 1784731191, deterministic: False
2023-11-26 21:41:47,772 - mmseg - INFO - initialize LevitUnet with init_cfg {'type': 'Normal', 'std': 0.01, 'override': {'name': 'conv_seg'}}
Name of parameter - Initialization information

decode_head.conv_seg.weight - torch.Size([2, 64, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.conv_seg.bias - torch.Size([2]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.conv_init.0.c.weight - torch.Size([48, 3, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.conv_init.0.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.conv_init.0.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.cnn_b1.0.c.weight - torch.Size([48, 48, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.cnn_b1.0.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.cnn_b1.0.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.atrous_conv1.0.c.weight - torch.Size([96, 48, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.atrous_conv1.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.atrous_conv1.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.combine1.0.c.weight - torch.Size([96, 96, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.combine1.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.combine1.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.atrous_conv2.0.c.weight - torch.Size([192, 96, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.atrous_conv2.0.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.atrous_conv2.0.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.combine2.0.c.weight - torch.Size([192, 192, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.combine2.0.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.combine2.0.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.combine2.2.c.weight - torch.Size([192, 192, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.combine2.2.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.combine2.2.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.atrous_conv3.0.c.weight - torch.Size([384, 192, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.atrous_conv3.0.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.atrous_conv3.0.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.combine3.0.c.weight - torch.Size([384, 384, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.combine3.0.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.combine3.0.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.combine3.2.c.weight - torch.Size([384, 384, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.combine3.2.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.combine3.2.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.combine3.4.c.weight - torch.Size([384, 384, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.combine3.4.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.combine3.4.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.cnn_b2.0.c.weight - torch.Size([96, 48, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.cnn_b2.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.cnn_b2.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.cnn_b3.0.c.weight - torch.Size([192, 96, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.cnn_b3.0.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.cnn_b3.0.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.cnn_b4.0.c.weight - torch.Size([384, 192, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.cnn_b4.0.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.cnn_b4.0.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.decoderBlock_1.conv1.0.weight - torch.Size([512, 2048, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.decoderBlock_1.conv1.1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.decoderBlock_1.conv1.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.decoderBlock_1.conv2.0.weight - torch.Size([512, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.decoderBlock_1.conv2.1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.decoderBlock_1.conv2.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.decoderBlock_2.conv1.0.weight - torch.Size([256, 704, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.decoderBlock_2.conv1.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.decoderBlock_2.conv1.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.decoderBlock_2.conv2.0.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.decoderBlock_2.conv2.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.decoderBlock_2.conv2.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.decoderBlock_3.conv1.0.weight - torch.Size([128, 352, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.decoderBlock_3.conv1.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.decoderBlock_3.conv1.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.decoderBlock_3.conv2.0.weight - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.decoderBlock_3.conv2.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.decoderBlock_3.conv2.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.decoderBlock_4.conv1.0.weight - torch.Size([64, 176, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.decoderBlock_4.conv1.1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.decoderBlock_4.conv1.1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.decoderBlock_4.conv2.0.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.decoderBlock_4.conv2.1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.decoderBlock_4.conv2.1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.segmentation_head.0.weight - torch.Size([4, 112, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.segmentation_head.0.bias - torch.Size([4]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_1.0.m.attention_biases - torch.Size([6, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_1.0.m.qkv.c.weight - torch.Size([768, 384]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_1.0.m.qkv.bn.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_1.0.m.qkv.bn.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_1.0.m.proj.1.c.weight - torch.Size([384, 384]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_1.0.m.proj.1.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_1.0.m.proj.1.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_1.1.m.0.c.weight - torch.Size([768, 384]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_1.1.m.0.bn.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_1.1.m.0.bn.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_1.1.m.2.c.weight - torch.Size([384, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_1.1.m.2.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_1.1.m.2.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_1.2.m.attention_biases - torch.Size([6, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_1.2.m.qkv.c.weight - torch.Size([768, 384]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_1.2.m.qkv.bn.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_1.2.m.qkv.bn.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_1.2.m.proj.1.c.weight - torch.Size([384, 384]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_1.2.m.proj.1.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_1.2.m.proj.1.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_1.3.m.0.c.weight - torch.Size([768, 384]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_1.3.m.0.bn.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_1.3.m.0.bn.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_1.3.m.2.c.weight - torch.Size([384, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_1.3.m.2.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_1.3.m.2.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_1.4.m.attention_biases - torch.Size([6, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_1.4.m.qkv.c.weight - torch.Size([768, 384]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_1.4.m.qkv.bn.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_1.4.m.qkv.bn.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_1.4.m.proj.1.c.weight - torch.Size([384, 384]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_1.4.m.proj.1.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_1.4.m.proj.1.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_1.5.m.0.c.weight - torch.Size([768, 384]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_1.5.m.0.bn.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_1.5.m.0.bn.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_1.5.m.2.c.weight - torch.Size([384, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_1.5.m.2.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_1.5.m.2.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_1.6.m.attention_biases - torch.Size([6, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_1.6.m.qkv.c.weight - torch.Size([768, 384]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_1.6.m.qkv.bn.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_1.6.m.qkv.bn.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_1.6.m.proj.1.c.weight - torch.Size([384, 384]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_1.6.m.proj.1.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_1.6.m.proj.1.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_1.7.m.0.c.weight - torch.Size([768, 384]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_1.7.m.0.bn.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_1.7.m.0.bn.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_1.7.m.2.c.weight - torch.Size([384, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_1.7.m.2.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_1.7.m.2.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_2.8.attention_biases - torch.Size([12, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_2.8.kv.c.weight - torch.Size([1920, 384]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_2.8.kv.bn.weight - torch.Size([1920]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_2.8.kv.bn.bias - torch.Size([1920]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_2.8.q.1.c.weight - torch.Size([384, 384]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_2.8.q.1.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_2.8.q.1.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_2.8.proj.1.c.weight - torch.Size([512, 1536]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_2.8.proj.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_2.8.proj.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_2.9.m.0.c.weight - torch.Size([1024, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_2.9.m.0.bn.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_2.9.m.0.bn.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_2.9.m.2.c.weight - torch.Size([512, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_2.9.m.2.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_2.9.m.2.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_2.10.m.attention_biases - torch.Size([9, 256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_2.10.m.qkv.c.weight - torch.Size([1152, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_2.10.m.qkv.bn.weight - torch.Size([1152]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_2.10.m.qkv.bn.bias - torch.Size([1152]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_2.10.m.proj.1.c.weight - torch.Size([512, 576]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_2.10.m.proj.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_2.10.m.proj.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_2.11.m.0.c.weight - torch.Size([1024, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_2.11.m.0.bn.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_2.11.m.0.bn.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_2.11.m.2.c.weight - torch.Size([512, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_2.11.m.2.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_2.11.m.2.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_2.12.m.attention_biases - torch.Size([9, 256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_2.12.m.qkv.c.weight - torch.Size([1152, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_2.12.m.qkv.bn.weight - torch.Size([1152]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_2.12.m.qkv.bn.bias - torch.Size([1152]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_2.12.m.proj.1.c.weight - torch.Size([512, 576]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_2.12.m.proj.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_2.12.m.proj.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_2.13.m.0.c.weight - torch.Size([1024, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_2.13.m.0.bn.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_2.13.m.0.bn.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_2.13.m.2.c.weight - torch.Size([512, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_2.13.m.2.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_2.13.m.2.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_2.14.m.attention_biases - torch.Size([9, 256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_2.14.m.qkv.c.weight - torch.Size([1152, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_2.14.m.qkv.bn.weight - torch.Size([1152]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_2.14.m.qkv.bn.bias - torch.Size([1152]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_2.14.m.proj.1.c.weight - torch.Size([512, 576]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_2.14.m.proj.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_2.14.m.proj.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_2.15.m.0.c.weight - torch.Size([1024, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_2.15.m.0.bn.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_2.15.m.0.bn.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_2.15.m.2.c.weight - torch.Size([512, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_2.15.m.2.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_2.15.m.2.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_2.16.m.attention_biases - torch.Size([9, 256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_2.16.m.qkv.c.weight - torch.Size([1152, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_2.16.m.qkv.bn.weight - torch.Size([1152]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_2.16.m.qkv.bn.bias - torch.Size([1152]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_2.16.m.proj.1.c.weight - torch.Size([512, 576]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_2.16.m.proj.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_2.16.m.proj.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_2.17.m.0.c.weight - torch.Size([1024, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_2.17.m.0.bn.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_2.17.m.0.bn.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_2.17.m.2.c.weight - torch.Size([512, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_2.17.m.2.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_2.17.m.2.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_3.18.attention_biases - torch.Size([16, 256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_3.18.kv.c.weight - torch.Size([2560, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_3.18.kv.bn.weight - torch.Size([2560]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_3.18.kv.bn.bias - torch.Size([2560]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_3.18.q.1.c.weight - torch.Size([512, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_3.18.q.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_3.18.q.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_3.18.proj.1.c.weight - torch.Size([768, 2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_3.18.proj.1.bn.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_3.18.proj.1.bn.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_3.19.m.0.c.weight - torch.Size([1536, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_3.19.m.0.bn.weight - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_3.19.m.0.bn.bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_3.19.m.2.c.weight - torch.Size([768, 1536]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_3.19.m.2.bn.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_3.19.m.2.bn.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_3.20.m.attention_biases - torch.Size([12, 64]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_3.20.m.qkv.c.weight - torch.Size([1536, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_3.20.m.qkv.bn.weight - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_3.20.m.qkv.bn.bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_3.20.m.proj.1.c.weight - torch.Size([768, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_3.20.m.proj.1.bn.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_3.20.m.proj.1.bn.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_3.21.m.0.c.weight - torch.Size([1536, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_3.21.m.0.bn.weight - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_3.21.m.0.bn.bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_3.21.m.2.c.weight - torch.Size([768, 1536]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_3.21.m.2.bn.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_3.21.m.2.bn.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_3.22.m.attention_biases - torch.Size([12, 64]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_3.22.m.qkv.c.weight - torch.Size([1536, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_3.22.m.qkv.bn.weight - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_3.22.m.qkv.bn.bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_3.22.m.proj.1.c.weight - torch.Size([768, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_3.22.m.proj.1.bn.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_3.22.m.proj.1.bn.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_3.23.m.0.c.weight - torch.Size([1536, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_3.23.m.0.bn.weight - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_3.23.m.0.bn.bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_3.23.m.2.c.weight - torch.Size([768, 1536]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_3.23.m.2.bn.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_3.23.m.2.bn.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_3.24.m.attention_biases - torch.Size([12, 64]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_3.24.m.qkv.c.weight - torch.Size([1536, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_3.24.m.qkv.bn.weight - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_3.24.m.qkv.bn.bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_3.24.m.proj.1.c.weight - torch.Size([768, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_3.24.m.proj.1.bn.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_3.24.m.proj.1.bn.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_3.25.m.0.c.weight - torch.Size([1536, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_3.25.m.0.bn.weight - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_3.25.m.0.bn.bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_3.25.m.2.c.weight - torch.Size([768, 1536]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_3.25.m.2.bn.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_3.25.m.2.bn.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_3.26.m.attention_biases - torch.Size([12, 64]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_3.26.m.qkv.c.weight - torch.Size([1536, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_3.26.m.qkv.bn.weight - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_3.26.m.qkv.bn.bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_3.26.m.proj.1.c.weight - torch.Size([768, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_3.26.m.proj.1.bn.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_3.26.m.proj.1.bn.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_3.27.m.0.c.weight - torch.Size([1536, 768]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_3.27.m.0.bn.weight - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_3.27.m.0.bn.bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_3.27.m.2.c.weight - torch.Size([768, 1536]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_3.27.m.2.bn.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  

decode_head.block_3.27.m.2.bn.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoderFull  
2023-11-26 21:41:47,798 - mmseg - INFO - EncoderDecoderFull(
  (decode_head): LevitUnet(
    input_transform=None, ignore_index=255, align_corners=False
    (loss_decode): ModuleList(
      (0): FocalLoss()
      (1): DiceLoss()
    )
    (conv_seg): Conv2d(64, 2, kernel_size=(1, 1), stride=(1, 1))
    (dropout): Dropout2d(p=0.1, inplace=False)
    (conv_init): Sequential(
      (0): Conv2d_BN(
        (c): Conv2d(3, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): Hardswish()
    )
    (cnn_b1): Sequential(
      (0): Conv2d_BN(
        (c): Conv2d(48, 48, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): Hardswish()
    )
    (atrous_conv1): Sequential(
      (0): Conv2d_BN(
        (c): Conv2d(48, 96, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): Hardswish()
    )
    (combine1): Sequential(
      (0): Conv2d_BN(
        (c): Conv2d(96, 96, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): Hardswish()
    )
    (atrous_conv2): Sequential(
      (0): Conv2d_BN(
        (c): Conv2d(96, 192, kernel_size=(3, 3), stride=(1, 1), padding=(3, 3), dilation=(3, 3), bias=False)
        (bn): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): Hardswish()
    )
    (combine2): Sequential(
      (0): Conv2d_BN(
        (c): Conv2d(192, 192, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): Hardswish()
      (2): Conv2d_BN(
        (c): Conv2d(192, 192, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (3): Hardswish()
    )
    (atrous_conv3): Sequential(
      (0): Conv2d_BN(
        (c): Conv2d(192, 384, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
        (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): Hardswish()
    )
    (combine3): Sequential(
      (0): Conv2d_BN(
        (c): Conv2d(384, 384, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): Hardswish()
      (2): Conv2d_BN(
        (c): Conv2d(384, 384, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (3): Hardswish()
      (4): Conv2d_BN(
        (c): Conv2d(384, 384, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (5): Hardswish()
    )
    (cnn_b2): Sequential(
      (0): Conv2d_BN(
        (c): Conv2d(48, 96, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): Hardswish()
    )
    (cnn_b3): Sequential(
      (0): Conv2d_BN(
        (c): Conv2d(96, 192, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): Hardswish()
    )
    (cnn_b4): Sequential(
      (0): Conv2d_BN(
        (c): Conv2d(192, 384, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (decoderBlock_1): DecoderBlock(
      (conv1): Conv2dReLU(
        (0): Conv2d(2048, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (conv2): Conv2dReLU(
        (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (up): UpsamplingBilinear2d(scale_factor=2.0, mode=bilinear)
    )
    (decoderBlock_2): DecoderBlock(
      (conv1): Conv2dReLU(
        (0): Conv2d(704, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (conv2): Conv2dReLU(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (up): UpsamplingBilinear2d(scale_factor=2.0, mode=bilinear)
    )
    (decoderBlock_3): DecoderBlock(
      (conv1): Conv2dReLU(
        (0): Conv2d(352, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (conv2): Conv2dReLU(
        (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (up): UpsamplingBilinear2d(scale_factor=2.0, mode=bilinear)
    )
    (decoderBlock_4): DecoderBlock(
      (conv1): Conv2dReLU(
        (0): Conv2d(176, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (conv2): Conv2dReLU(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (up): UpsamplingBilinear2d(scale_factor=2.0, mode=bilinear)
    )
    (segmentation_head): SegmentationHead(
      (0): Conv2d(112, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): UpsamplingBilinear2d(scale_factor=2.0, mode=bilinear)
    )
    (block_1): Sequential(
      (0): Residual(
        (m): Attention(
          (qkv): Linear_BN(
            (c): Linear(in_features=384, out_features=768, bias=False)
            (bn): BatchNorm1d(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (proj): Sequential(
            (0): Hardswish()
            (1): Linear_BN(
              (c): Linear(in_features=384, out_features=384, bias=False)
              (bn): BatchNorm1d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
      )
      (1): Residual(
        (m): Sequential(
          (0): Linear_BN(
            (c): Linear(in_features=384, out_features=768, bias=False)
            (bn): BatchNorm1d(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (1): Hardswish()
          (2): Linear_BN(
            (c): Linear(in_features=768, out_features=384, bias=False)
            (bn): BatchNorm1d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (2): Residual(
        (m): Attention(
          (qkv): Linear_BN(
            (c): Linear(in_features=384, out_features=768, bias=False)
            (bn): BatchNorm1d(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (proj): Sequential(
            (0): Hardswish()
            (1): Linear_BN(
              (c): Linear(in_features=384, out_features=384, bias=False)
              (bn): BatchNorm1d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
      )
      (3): Residual(
        (m): Sequential(
          (0): Linear_BN(
            (c): Linear(in_features=384, out_features=768, bias=False)
            (bn): BatchNorm1d(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (1): Hardswish()
          (2): Linear_BN(
            (c): Linear(in_features=768, out_features=384, bias=False)
            (bn): BatchNorm1d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (4): Residual(
        (m): Attention(
          (qkv): Linear_BN(
            (c): Linear(in_features=384, out_features=768, bias=False)
            (bn): BatchNorm1d(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (proj): Sequential(
            (0): Hardswish()
            (1): Linear_BN(
              (c): Linear(in_features=384, out_features=384, bias=False)
              (bn): BatchNorm1d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
      )
      (5): Residual(
        (m): Sequential(
          (0): Linear_BN(
            (c): Linear(in_features=384, out_features=768, bias=False)
            (bn): BatchNorm1d(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (1): Hardswish()
          (2): Linear_BN(
            (c): Linear(in_features=768, out_features=384, bias=False)
            (bn): BatchNorm1d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (6): Residual(
        (m): Attention(
          (qkv): Linear_BN(
            (c): Linear(in_features=384, out_features=768, bias=False)
            (bn): BatchNorm1d(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (proj): Sequential(
            (0): Hardswish()
            (1): Linear_BN(
              (c): Linear(in_features=384, out_features=384, bias=False)
              (bn): BatchNorm1d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
      )
      (7): Residual(
        (m): Sequential(
          (0): Linear_BN(
            (c): Linear(in_features=384, out_features=768, bias=False)
            (bn): BatchNorm1d(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (1): Hardswish()
          (2): Linear_BN(
            (c): Linear(in_features=768, out_features=384, bias=False)
            (bn): BatchNorm1d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
    )
    (block_2): Sequential(
      (8): AttentionSubsample(
        (kv): Linear_BN(
          (c): Linear(in_features=384, out_features=1920, bias=False)
          (bn): BatchNorm1d(1920, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (q): Sequential(
          (0): Subsample()
          (1): Linear_BN(
            (c): Linear(in_features=384, out_features=384, bias=False)
            (bn): BatchNorm1d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (proj): Sequential(
          (0): Hardswish()
          (1): Linear_BN(
            (c): Linear(in_features=1536, out_features=512, bias=False)
            (bn): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (9): Residual(
        (m): Sequential(
          (0): Linear_BN(
            (c): Linear(in_features=512, out_features=1024, bias=False)
            (bn): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (1): Hardswish()
          (2): Linear_BN(
            (c): Linear(in_features=1024, out_features=512, bias=False)
            (bn): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (10): Residual(
        (m): Attention(
          (qkv): Linear_BN(
            (c): Linear(in_features=512, out_features=1152, bias=False)
            (bn): BatchNorm1d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (proj): Sequential(
            (0): Hardswish()
            (1): Linear_BN(
              (c): Linear(in_features=576, out_features=512, bias=False)
              (bn): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
      )
      (11): Residual(
        (m): Sequential(
          (0): Linear_BN(
            (c): Linear(in_features=512, out_features=1024, bias=False)
            (bn): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (1): Hardswish()
          (2): Linear_BN(
            (c): Linear(in_features=1024, out_features=512, bias=False)
            (bn): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (12): Residual(
        (m): Attention(
          (qkv): Linear_BN(
            (c): Linear(in_features=512, out_features=1152, bias=False)
            (bn): BatchNorm1d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (proj): Sequential(
            (0): Hardswish()
            (1): Linear_BN(
              (c): Linear(in_features=576, out_features=512, bias=False)
              (bn): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
      )
      (13): Residual(
        (m): Sequential(
          (0): Linear_BN(
            (c): Linear(in_features=512, out_features=1024, bias=False)
            (bn): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (1): Hardswish()
          (2): Linear_BN(
            (c): Linear(in_features=1024, out_features=512, bias=False)
            (bn): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (14): Residual(
        (m): Attention(
          (qkv): Linear_BN(
            (c): Linear(in_features=512, out_features=1152, bias=False)
            (bn): BatchNorm1d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (proj): Sequential(
            (0): Hardswish()
            (1): Linear_BN(
              (c): Linear(in_features=576, out_features=512, bias=False)
              (bn): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
      )
      (15): Residual(
        (m): Sequential(
          (0): Linear_BN(
            (c): Linear(in_features=512, out_features=1024, bias=False)
            (bn): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (1): Hardswish()
          (2): Linear_BN(
            (c): Linear(in_features=1024, out_features=512, bias=False)
            (bn): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (16): Residual(
        (m): Attention(
          (qkv): Linear_BN(
            (c): Linear(in_features=512, out_features=1152, bias=False)
            (bn): BatchNorm1d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (proj): Sequential(
            (0): Hardswish()
            (1): Linear_BN(
              (c): Linear(in_features=576, out_features=512, bias=False)
              (bn): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
      )
      (17): Residual(
        (m): Sequential(
          (0): Linear_BN(
            (c): Linear(in_features=512, out_features=1024, bias=False)
            (bn): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (1): Hardswish()
          (2): Linear_BN(
            (c): Linear(in_features=1024, out_features=512, bias=False)
            (bn): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
    )
    (block_3): Sequential(
      (18): AttentionSubsample(
        (kv): Linear_BN(
          (c): Linear(in_features=512, out_features=2560, bias=False)
          (bn): BatchNorm1d(2560, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (q): Sequential(
          (0): Subsample()
          (1): Linear_BN(
            (c): Linear(in_features=512, out_features=512, bias=False)
            (bn): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (proj): Sequential(
          (0): Hardswish()
          (1): Linear_BN(
            (c): Linear(in_features=2048, out_features=768, bias=False)
            (bn): BatchNorm1d(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (19): Residual(
        (m): Sequential(
          (0): Linear_BN(
            (c): Linear(in_features=768, out_features=1536, bias=False)
            (bn): BatchNorm1d(1536, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (1): Hardswish()
          (2): Linear_BN(
            (c): Linear(in_features=1536, out_features=768, bias=False)
            (bn): BatchNorm1d(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (20): Residual(
        (m): Attention(
          (qkv): Linear_BN(
            (c): Linear(in_features=768, out_features=1536, bias=False)
            (bn): BatchNorm1d(1536, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (proj): Sequential(
            (0): Hardswish()
            (1): Linear_BN(
              (c): Linear(in_features=768, out_features=768, bias=False)
              (bn): BatchNorm1d(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
      )
      (21): Residual(
        (m): Sequential(
          (0): Linear_BN(
            (c): Linear(in_features=768, out_features=1536, bias=False)
            (bn): BatchNorm1d(1536, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (1): Hardswish()
          (2): Linear_BN(
            (c): Linear(in_features=1536, out_features=768, bias=False)
            (bn): BatchNorm1d(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (22): Residual(
        (m): Attention(
          (qkv): Linear_BN(
            (c): Linear(in_features=768, out_features=1536, bias=False)
            (bn): BatchNorm1d(1536, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (proj): Sequential(
            (0): Hardswish()
            (1): Linear_BN(
              (c): Linear(in_features=768, out_features=768, bias=False)
              (bn): BatchNorm1d(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
      )
      (23): Residual(
        (m): Sequential(
          (0): Linear_BN(
            (c): Linear(in_features=768, out_features=1536, bias=False)
            (bn): BatchNorm1d(1536, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (1): Hardswish()
          (2): Linear_BN(
            (c): Linear(in_features=1536, out_features=768, bias=False)
            (bn): BatchNorm1d(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (24): Residual(
        (m): Attention(
          (qkv): Linear_BN(
            (c): Linear(in_features=768, out_features=1536, bias=False)
            (bn): BatchNorm1d(1536, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (proj): Sequential(
            (0): Hardswish()
            (1): Linear_BN(
              (c): Linear(in_features=768, out_features=768, bias=False)
              (bn): BatchNorm1d(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
      )
      (25): Residual(
        (m): Sequential(
          (0): Linear_BN(
            (c): Linear(in_features=768, out_features=1536, bias=False)
            (bn): BatchNorm1d(1536, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (1): Hardswish()
          (2): Linear_BN(
            (c): Linear(in_features=1536, out_features=768, bias=False)
            (bn): BatchNorm1d(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (26): Residual(
        (m): Attention(
          (qkv): Linear_BN(
            (c): Linear(in_features=768, out_features=1536, bias=False)
            (bn): BatchNorm1d(1536, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (proj): Sequential(
            (0): Hardswish()
            (1): Linear_BN(
              (c): Linear(in_features=768, out_features=768, bias=False)
              (bn): BatchNorm1d(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
      )
      (27): Residual(
        (m): Sequential(
          (0): Linear_BN(
            (c): Linear(in_features=768, out_features=1536, bias=False)
            (bn): BatchNorm1d(1536, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (1): Hardswish()
          (2): Linear_BN(
            (c): Linear(in_features=1536, out_features=768, bias=False)
            (bn): BatchNorm1d(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
    )
    (up): UpsamplingBilinear2d(scale_factor=2.0, mode=bilinear)
  )
  init_cfg={'type': 'Normal', 'std': 0.01, 'override': {'name': 'conv_seg'}}
)
2023-11-26 21:41:47,810 - mmseg - INFO - Loaded 474 images
2023-11-26 21:41:55,097 - mmseg - INFO - Loaded 105 images
2023-11-26 21:41:55,097 - mmseg - INFO - Start running, host: featurize@featurize, work_dir: /home/featurize/work/test/work_dirs/levitunet
2023-11-26 21:41:55,097 - mmseg - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) PolyLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TensorboardLoggerHook              
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) PolyLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TensorboardLoggerHook              
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) PolyLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TensorboardLoggerHook              
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TensorboardLoggerHook              
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TensorboardLoggerHook              
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TensorboardLoggerHook              
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TensorboardLoggerHook              
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2023-11-26 21:41:55,098 - mmseg - INFO - workflow: [('train', 1)], max: 5000 iters
2023-11-26 21:41:55,098 - mmseg - INFO - Checkpoints will be saved to /home/featurize/work/test/work_dirs/levitunet by HardDiskBackend.
