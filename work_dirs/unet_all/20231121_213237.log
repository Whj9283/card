2023-11-21 21:32:37,244 - mmseg - INFO - Multi-processing start method is `None`
2023-11-21 21:32:37,245 - mmseg - INFO - OpenCV num_threads is `6
2023-11-21 21:32:37,291 - mmseg - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.18 (default, Sep 11 2023, 13:40:15) [GCC 11.2.0]
CUDA available: True
GPU 0: NVIDIA GeForce RTX 3090
CUDA_HOME: /environment/miniconda3
NVCC: Cuda compilation tools, release 11.8, V11.8.89
GCC: gcc (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0
PyTorch: 1.11.0+cu113
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

TorchVision: 0.12.0+cu113
OpenCV: 4.8.1
MMCV: 1.7.0
MMCV Compiler: GCC 9.3
MMCV CUDA Compiler: 11.3
MMSegmentation: 0.29.1+
------------------------------------------------------------

2023-11-21 21:32:37,292 - mmseg - INFO - Distributed training: False
2023-11-21 21:32:37,511 - mmseg - INFO - Config:
norm_cfg = dict(type='BN', requires_grad=True)
backbone_norm_cfg = dict(type='LN', requires_grad=True)
model = dict(
    type='EncoderDecoder',
    pretrained=None,
    backbone=dict(
        type='UnetBackbone',
        in_channels=3,
        context_layer='seLayer',
        channel_list=[64, 128, 256, 512]),
    decode_head=dict(
        type='UnetHead',
        num_classes=4,
        channels=64,
        resPath=True,
        attention=True,
        threshold=0.2,
        norm_cfg=dict(type='BN', requires_grad=True),
        loss_decode=[
            dict(
                type='FocalLoss',
                use_sigmoid=True,
                gamma=2.0,
                alpha=0.25,
                class_weight=[0.1, 0.4, 0.3, 0.2],
                loss_weight=2.0),
            dict(
                type='DiceLoss',
                loss_name='loss_dice',
                class_weight=[0.1, 0.4, 0.3, 0.2],
                loss_weight=2.0)
        ]))
train_cfg = dict()
test_cfg = dict(mode='whole')
dataset_type = 'MyDataset'
crop_size = (512, 512)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations'),
    dict(type='Resize', img_scale=(600, 600)),
    dict(type='RandomCrop', crop_size=(512, 512), cat_max_ratio=0.75),
    dict(type='RandomFlip', flip_ratio=0.5),
    dict(type='PhotoMetricDistortion'),
    dict(type='Normalize', mean=[0, 0, 0], std=[1, 1, 1], to_rgb=True),
    dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_semantic_seg'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(512, 512),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=False),
            dict(type='Normalize', mean=[0, 0, 0], std=[1, 1, 1], to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
data_root = './datasets/'
data = dict(
    samples_per_gpu=10,
    workers_per_gpu=2,
    train=dict(
        type='MyDataset',
        data_root='./datasets/',
        img_dir='train/images',
        ann_dir='train/labels',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations'),
            dict(type='Resize', img_scale=(600, 600)),
            dict(type='RandomCrop', crop_size=(512, 512), cat_max_ratio=0.75),
            dict(type='RandomFlip', flip_ratio=0.5),
            dict(type='PhotoMetricDistortion'),
            dict(type='Normalize', mean=[0, 0, 0], std=[1, 1, 1], to_rgb=True),
            dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),
            dict(type='DefaultFormatBundle'),
            dict(type='Collect', keys=['img', 'gt_semantic_seg'])
        ]),
    val=dict(
        type='MyDataset',
        data_root='./datasets/',
        img_dir='test/images',
        ann_dir='test/labels',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(512, 512),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=False),
                    dict(
                        type='Normalize',
                        mean=[0, 0, 0],
                        std=[1, 1, 1],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]),
    test=dict(
        type='MyDataset',
        data_root='./datasets/',
        img_dir='test/images',
        ann_dir='test/labels',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(512, 512),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=False),
                    dict(
                        type='Normalize',
                        mean=[0, 0, 0],
                        std=[1, 1, 1],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]))
log_config = dict(
    interval=50,
    hooks=[
        dict(type='TensorboardLoggerHook'),
        dict(type='TextLoggerHook', by_epoch=False)
    ])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
cudnn_benchmark = False
optimizer = dict(type='Adam', lr=0.0001, betas=(0.9, 0.999))
optimizer_config = dict()
lr_config = dict(policy='poly', power=0.9, min_lr=1e-05, by_epoch=False)
runner = dict(type='IterBasedRunner', max_iters=5000)
checkpoint_config = dict(by_epoch=False, save_optimizer=False, interval=5000)
evaluation = dict(interval=500, metric=['mIoU', 'mFscore', 'mDice'])
work_dir = './work_dirs/unet_all'
gpu_ids = [0]
auto_resume = False

2023-11-21 21:32:37,511 - mmseg - INFO - Set random seed to 2143311869, deterministic: False
2023-11-21 21:32:37,632 - mmseg - INFO - initialize UnetHead with init_cfg {'type': 'Normal', 'std': 0.01, 'override': {'name': 'conv_seg'}}
Name of parameter - Initialization information

backbone.inc.conv.conv.0.weight - torch.Size([64, 3, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.inc.conv.conv.0.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.inc.conv.conv.1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.inc.conv.conv.1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.inc.conv.conv.3.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.inc.conv.conv.3.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.inc.conv.conv.4.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.inc.conv.conv.4.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.down1.down_conv.1.conv.0.weight - torch.Size([128, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.down1.down_conv.1.conv.0.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.down1.down_conv.1.conv.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.down1.down_conv.1.conv.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.down1.down_conv.1.conv.3.weight - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.down1.down_conv.1.conv.3.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.down1.down_conv.1.conv.4.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.down1.down_conv.1.conv.4.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.down2.down_conv.1.conv.0.weight - torch.Size([256, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.down2.down_conv.1.conv.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.down2.down_conv.1.conv.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.down2.down_conv.1.conv.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.down2.down_conv.1.conv.3.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.down2.down_conv.1.conv.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.down2.down_conv.1.conv.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.down2.down_conv.1.conv.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.down3.down_conv.1.conv.0.weight - torch.Size([512, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.down3.down_conv.1.conv.0.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.down3.down_conv.1.conv.1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.down3.down_conv.1.conv.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.down3.down_conv.1.conv.3.weight - torch.Size([512, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.down3.down_conv.1.conv.3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.down3.down_conv.1.conv.4.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.down3.down_conv.1.conv.4.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.down4.down_conv.1.conv.0.weight - torch.Size([512, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.down4.down_conv.1.conv.0.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.down4.down_conv.1.conv.1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.down4.down_conv.1.conv.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.down4.down_conv.1.conv.3.weight - torch.Size([512, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.down4.down_conv.1.conv.3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.down4.down_conv.1.conv.4.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.down4.down_conv.1.conv.4.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.context_layer1_1.fc.0.weight - torch.Size([16, 64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.context_layer1_1.fc.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.context_layer1_1.fc.2.weight - torch.Size([64, 16]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.context_layer1_1.fc.2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.context_layer2_1.fc.0.weight - torch.Size([32, 128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.context_layer2_1.fc.0.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.context_layer2_1.fc.2.weight - torch.Size([128, 32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.context_layer2_1.fc.2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.context_layer3_1.fc.0.weight - torch.Size([64, 256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.context_layer3_1.fc.0.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.context_layer3_1.fc.2.weight - torch.Size([256, 64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.context_layer3_1.fc.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.context_layer4_1.fc.0.weight - torch.Size([128, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.context_layer4_1.fc.0.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.context_layer4_1.fc.2.weight - torch.Size([512, 128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.context_layer4_1.fc.2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.conv_seg.weight - torch.Size([4, 64, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.conv_seg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.up1.ca.conv1.weight - torch.Size([256, 1024, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up1.ca.conv1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up1.ca.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up1.ca.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up1.ca.conv_h.weight - torch.Size([1024, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up1.ca.conv_h.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up1.ca.conv_w.weight - torch.Size([1024, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up1.ca.conv_w.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up1.conv.conv.0.weight - torch.Size([256, 1024, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up1.conv.conv.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up1.conv.conv.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up1.conv.conv.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up1.conv.conv.3.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up1.conv.conv.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up1.conv.conv.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up1.conv.conv.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up2.ca.conv1.weight - torch.Size([128, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up2.ca.conv1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up2.ca.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up2.ca.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up2.ca.conv_h.weight - torch.Size([512, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up2.ca.conv_h.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up2.ca.conv_w.weight - torch.Size([512, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up2.ca.conv_w.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up2.conv.conv.0.weight - torch.Size([128, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up2.conv.conv.0.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up2.conv.conv.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up2.conv.conv.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up2.conv.conv.3.weight - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up2.conv.conv.3.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up2.conv.conv.4.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up2.conv.conv.4.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up3.ca.conv1.weight - torch.Size([64, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up3.ca.conv1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up3.ca.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up3.ca.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up3.ca.conv_h.weight - torch.Size([256, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up3.ca.conv_h.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up3.ca.conv_w.weight - torch.Size([256, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up3.ca.conv_w.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up3.conv.conv.0.weight - torch.Size([64, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up3.conv.conv.0.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up3.conv.conv.1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up3.conv.conv.1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up3.conv.conv.3.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up3.conv.conv.3.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up3.conv.conv.4.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up3.conv.conv.4.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up4.ca.conv1.weight - torch.Size([32, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up4.ca.conv1.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up4.ca.bn1.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up4.ca.bn1.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up4.ca.conv_h.weight - torch.Size([128, 32, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up4.ca.conv_h.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up4.ca.conv_w.weight - torch.Size([128, 32, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up4.ca.conv_w.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up4.conv.conv.0.weight - torch.Size([64, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up4.conv.conv.0.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up4.conv.conv.1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up4.conv.conv.1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up4.conv.conv.3.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up4.conv.conv.3.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up4.conv.conv.4.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up4.conv.conv.4.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  
2023-11-21 21:32:37,638 - mmseg - INFO - EncoderDecoder(
  (backbone): UnetBackbone(
    (inc): InConv(
      (conv): DoubleConv(
        (conv): Sequential(
          (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU(inplace=True)
        )
      )
    )
    (down1): Down(
      (down_conv): Sequential(
        (0): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
        (1): DoubleConv(
          (conv): Sequential(
            (0): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU(inplace=True)
            (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU(inplace=True)
          )
        )
      )
    )
    (down2): Down(
      (down_conv): Sequential(
        (0): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
        (1): DoubleConv(
          (conv): Sequential(
            (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU(inplace=True)
            (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU(inplace=True)
          )
        )
      )
    )
    (down3): Down(
      (down_conv): Sequential(
        (0): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
        (1): DoubleConv(
          (conv): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU(inplace=True)
            (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU(inplace=True)
          )
        )
      )
    )
    (down4): Down(
      (down_conv): Sequential(
        (0): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
        (1): DoubleConv(
          (conv): Sequential(
            (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU(inplace=True)
            (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU(inplace=True)
          )
        )
      )
    )
    (context_layer1_1): SELayer(
      (avg_pool): AdaptiveAvgPool2d(output_size=1)
      (fc): Sequential(
        (0): Linear(in_features=64, out_features=16, bias=True)
        (1): ReLU(inplace=True)
        (2): Linear(in_features=16, out_features=64, bias=True)
        (3): Hswish(
          (relu): ReLU6(inplace=True)
        )
      )
    )
    (context_layer2_1): SELayer(
      (avg_pool): AdaptiveAvgPool2d(output_size=1)
      (fc): Sequential(
        (0): Linear(in_features=128, out_features=32, bias=True)
        (1): ReLU(inplace=True)
        (2): Linear(in_features=32, out_features=128, bias=True)
        (3): Hswish(
          (relu): ReLU6(inplace=True)
        )
      )
    )
    (context_layer3_1): SELayer(
      (avg_pool): AdaptiveAvgPool2d(output_size=1)
      (fc): Sequential(
        (0): Linear(in_features=256, out_features=64, bias=True)
        (1): ReLU(inplace=True)
        (2): Linear(in_features=64, out_features=256, bias=True)
        (3): Hswish(
          (relu): ReLU6(inplace=True)
        )
      )
    )
    (context_layer4_1): SELayer(
      (avg_pool): AdaptiveAvgPool2d(output_size=1)
      (fc): Sequential(
        (0): Linear(in_features=512, out_features=128, bias=True)
        (1): ReLU(inplace=True)
        (2): Linear(in_features=128, out_features=512, bias=True)
        (3): Hswish(
          (relu): ReLU6(inplace=True)
        )
      )
    )
  )
  (decode_head): UnetHead(
    input_transform=None, ignore_index=255, align_corners=False
    (loss_decode): ModuleList(
      (0): FocalLoss()
      (1): DiceLoss()
    )
    (conv_seg): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
    (dropout): Dropout2d(p=0.1, inplace=False)
    (up1): Up(
      (up): Upsample(scale_factor=2.0, mode=bilinear)
      (ca): CoordAtt(
        (pool_h): AdaptiveAvgPool2d(output_size=(None, 1))
        (pool_w): AdaptiveAvgPool2d(output_size=(1, None))
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act): h_swish(
          (sigmoid): h_sigmoid(
            (relu): ReLU6(inplace=True)
          )
        )
        (conv_h): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1))
        (conv_w): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1))
      )
      (conv): DoubleConv(
        (conv): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU(inplace=True)
        )
      )
    )
    (up2): Up(
      (up): Upsample(scale_factor=2.0, mode=bilinear)
      (ca): CoordAtt(
        (pool_h): AdaptiveAvgPool2d(output_size=(None, 1))
        (pool_w): AdaptiveAvgPool2d(output_size=(1, None))
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1))
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act): h_swish(
          (sigmoid): h_sigmoid(
            (relu): ReLU6(inplace=True)
          )
        )
        (conv_h): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1))
        (conv_w): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1))
      )
      (conv): DoubleConv(
        (conv): Sequential(
          (0): Conv2d(512, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU(inplace=True)
        )
      )
    )
    (up3): Up(
      (up): Upsample(scale_factor=2.0, mode=bilinear)
      (ca): CoordAtt(
        (pool_h): AdaptiveAvgPool2d(output_size=(None, 1))
        (pool_w): AdaptiveAvgPool2d(output_size=(1, None))
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1))
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act): h_swish(
          (sigmoid): h_sigmoid(
            (relu): ReLU6(inplace=True)
          )
        )
        (conv_h): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1))
        (conv_w): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1))
      )
      (conv): DoubleConv(
        (conv): Sequential(
          (0): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU(inplace=True)
        )
      )
    )
    (up4): Up(
      (up): Upsample(scale_factor=2.0, mode=bilinear)
      (ca): CoordAtt(
        (pool_h): AdaptiveAvgPool2d(output_size=(None, 1))
        (pool_w): AdaptiveAvgPool2d(output_size=(1, None))
        (conv1): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1))
        (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act): h_swish(
          (sigmoid): h_sigmoid(
            (relu): ReLU6(inplace=True)
          )
        )
        (conv_h): Conv2d(32, 128, kernel_size=(1, 1), stride=(1, 1))
        (conv_w): Conv2d(32, 128, kernel_size=(1, 1), stride=(1, 1))
      )
      (conv): DoubleConv(
        (conv): Sequential(
          (0): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU(inplace=True)
        )
      )
    )
  )
  init_cfg={'type': 'Normal', 'std': 0.01, 'override': {'name': 'conv_seg'}}
)
2023-11-21 21:32:37,650 - mmseg - INFO - Loaded 331 images
2023-11-21 21:32:43,669 - mmseg - INFO - Loaded 83 images
2023-11-21 21:32:43,669 - mmseg - INFO - Start running, host: featurize@featurize, work_dir: /home/featurize/work/test/work_dirs/unet_all
2023-11-21 21:32:43,669 - mmseg - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) PolyLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TensorboardLoggerHook              
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) PolyLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TensorboardLoggerHook              
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) PolyLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TensorboardLoggerHook              
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TensorboardLoggerHook              
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TensorboardLoggerHook              
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TensorboardLoggerHook              
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TensorboardLoggerHook              
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2023-11-21 21:32:43,670 - mmseg - INFO - workflow: [('train', 1)], max: 5000 iters
2023-11-21 21:32:43,670 - mmseg - INFO - Checkpoints will be saved to /home/featurize/work/test/work_dirs/unet_all by HardDiskBackend.
2023-11-21 21:33:18,889 - mmseg - INFO - Iter [50/5000]	lr: 9.921e-05, eta: 0:57:33, time: 0.698, data_time: 0.092, memory: 17708, decode.loss_focal: 0.0496, decode.loss_dice: 0.4676, decode.acc_seg: 93.3947, loss: 0.5172
2023-11-21 21:33:55,711 - mmseg - INFO - Iter [100/5000]	lr: 9.839e-05, eta: 0:58:33, time: 0.736, data_time: 0.134, memory: 17708, decode.loss_focal: 0.0383, decode.loss_dice: 0.4594, decode.acc_seg: 98.6925, loss: 0.4977
2023-11-21 21:34:29,598 - mmseg - INFO - Iter [150/5000]	lr: 9.758e-05, eta: 0:56:54, time: 0.678, data_time: 0.070, memory: 17708, decode.loss_focal: 0.0293, decode.loss_dice: 0.4519, decode.acc_seg: 98.9440, loss: 0.4812
2023-11-21 21:35:06,881 - mmseg - INFO - Iter [200/5000]	lr: 9.677e-05, eta: 0:57:08, time: 0.746, data_time: 0.141, memory: 17708, decode.loss_focal: 0.0224, decode.loss_dice: 0.4444, decode.acc_seg: 99.0626, loss: 0.4668
2023-11-21 21:35:40,873 - mmseg - INFO - Iter [250/5000]	lr: 9.596e-05, eta: 0:56:00, time: 0.680, data_time: 0.070, memory: 17708, decode.loss_focal: 0.0173, decode.loss_dice: 0.4364, decode.acc_seg: 99.1347, loss: 0.4537
2023-11-21 21:36:17,953 - mmseg - INFO - Iter [300/5000]	lr: 9.514e-05, eta: 0:55:51, time: 0.742, data_time: 0.135, memory: 17708, decode.loss_focal: 0.0134, decode.loss_dice: 0.4266, decode.acc_seg: 99.2654, loss: 0.4400
2023-11-21 21:36:52,156 - mmseg - INFO - Iter [350/5000]	lr: 9.433e-05, eta: 0:54:56, time: 0.684, data_time: 0.079, memory: 17708, decode.loss_focal: 0.0107, decode.loss_dice: 0.4138, decode.acc_seg: 99.3935, loss: 0.4245
2023-11-21 21:37:30,514 - mmseg - INFO - Iter [400/5000]	lr: 9.351e-05, eta: 0:54:54, time: 0.767, data_time: 0.168, memory: 17708, decode.loss_focal: 0.0088, decode.loss_dice: 0.3926, decode.acc_seg: 99.3458, loss: 0.4013
2023-11-21 21:38:04,640 - mmseg - INFO - Iter [450/5000]	lr: 9.269e-05, eta: 0:54:01, time: 0.683, data_time: 0.077, memory: 17708, decode.loss_focal: 0.0067, decode.loss_dice: 0.3680, decode.acc_seg: 99.3761, loss: 0.3747
2023-11-21 21:38:41,812 - mmseg - INFO - Iter [500/5000]	lr: 9.187e-05, eta: 0:53:40, time: 0.743, data_time: 0.135, memory: 17708, decode.loss_focal: 0.0048, decode.loss_dice: 0.3333, decode.acc_seg: 99.4880, loss: 0.3381
2023-11-21 21:39:01,711 - mmseg - INFO - per class results:
2023-11-21 21:39:01,713 - mmseg - INFO - 
+------------+-------+-------+-------+-------+-------+--------+-----------+--------+-------+
|   Class    |  IoU  |  VOE  |  ASD  |  MSSD |  Acc  | Fscore | Precision | Recall |  Dice |
+------------+-------+-------+-------+-------+-------+--------+-----------+--------+-------+
| background | 99.78 | 70.59 | 71.88 | 70.46 | 99.58 | 99.83  |   99.95   | 99.72  | 99.75 |
|  scratch   | 78.18 | 92.19 | 73.78 | 79.96 | 56.86 |  74.1  |   78.24   | 71.24  | 61.15 |
|   stain    | 89.95 | 80.42 | 72.64 | 74.28 | 91.05 | 90.93  |   88.29   | 94.03  | 86.39 |
| edgeDamage | 76.57 |  93.8 | 74.19 | 82.02 | 94.24 | 70.93  |   65.04   | 96.16  |  56.4 |
+------------+-------+-------+-------+-------+-------+--------+-----------+--------+-------+
2023-11-21 21:39:01,713 - mmseg - INFO - Summary:
2023-11-21 21:39:01,713 - mmseg - INFO - 
+-------+-------+-------+-------+-------+-------+---------+------------+---------+-------+
|  aAcc |  mIoU |  mVOE |  mASD | mMSSD |  mAcc | mFscore | mPrecision | mRecall | mDice |
+-------+-------+-------+-------+-------+-------+---------+------------+---------+-------+
| 99.78 | 86.12 | 84.25 | 73.12 | 76.68 | 85.43 |  83.95  |   82.88    |  90.29  | 75.92 |
+-------+-------+-------+-------+-------+-------+---------+------------+---------+-------+
2023-11-21 21:39:01,730 - mmseg - INFO - Iter(val) [83]	aAcc: 0.9978, mIoU: 0.8612, mVOE: 0.8425, mASD: 0.7312, mMSSD: 0.7668, mAcc: 0.8543, mFscore: 0.8395, mPrecision: 0.8288, mRecall: 0.9029, mDice: 0.7592, IoU.background: 0.9978, IoU.scratch: 0.7818, IoU.stain: 0.8995, IoU.edgeDamage: 0.7657, VOE.background: 0.7059, VOE.scratch: 0.9219, VOE.stain: 0.8042, VOE.edgeDamage: 0.9380, ASD.background: 0.7188, ASD.scratch: 0.7378, ASD.stain: 0.7264, ASD.edgeDamage: 0.7419, MSSD.background: 0.7046, MSSD.scratch: 0.7996, MSSD.stain: 0.7428, MSSD.edgeDamage: 0.8202, Acc.background: 0.9958, Acc.scratch: 0.5686, Acc.stain: 0.9105, Acc.edgeDamage: 0.9424, Fscore.background: 0.9983, Fscore.scratch: 0.7410, Fscore.stain: 0.9093, Fscore.edgeDamage: 0.7093, Precision.background: 0.9995, Precision.scratch: 0.7824, Precision.stain: 0.8829, Precision.edgeDamage: 0.6504, Recall.background: 0.9972, Recall.scratch: 0.7124, Recall.stain: 0.9403, Recall.edgeDamage: 0.9616, Dice.background: 0.9975, Dice.scratch: 0.6115, Dice.stain: 0.8639, Dice.edgeDamage: 0.5640
2023-11-21 21:39:35,630 - mmseg - INFO - Iter [550/5000]	lr: 9.106e-05, eta: 0:55:30, time: 1.076, data_time: 0.468, memory: 17708, decode.loss_focal: 0.0038, decode.loss_dice: 0.3049, decode.acc_seg: 99.5353, loss: 0.3087
2023-11-21 21:40:12,609 - mmseg - INFO - Iter [600/5000]	lr: 9.024e-05, eta: 0:54:49, time: 0.740, data_time: 0.132, memory: 17708, decode.loss_focal: 0.0031, decode.loss_dice: 0.2834, decode.acc_seg: 99.6063, loss: 0.2865
2023-11-21 21:40:46,601 - mmseg - INFO - Iter [650/5000]	lr: 8.941e-05, eta: 0:53:49, time: 0.680, data_time: 0.071, memory: 17708, decode.loss_focal: 0.0026, decode.loss_dice: 0.2699, decode.acc_seg: 99.6393, loss: 0.2725
2023-11-21 21:41:23,656 - mmseg - INFO - Iter [700/5000]	lr: 8.859e-05, eta: 0:53:12, time: 0.741, data_time: 0.134, memory: 17708, decode.loss_focal: 0.0024, decode.loss_dice: 0.2581, decode.acc_seg: 99.6104, loss: 0.2605
2023-11-21 21:41:57,629 - mmseg - INFO - Iter [750/5000]	lr: 8.777e-05, eta: 0:52:17, time: 0.679, data_time: 0.070, memory: 17708, decode.loss_focal: 0.0021, decode.loss_dice: 0.2508, decode.acc_seg: 99.6466, loss: 0.2529
2023-11-21 21:42:34,745 - mmseg - INFO - Iter [800/5000]	lr: 8.695e-05, eta: 0:51:41, time: 0.742, data_time: 0.135, memory: 17708, decode.loss_focal: 0.0019, decode.loss_dice: 0.2439, decode.acc_seg: 99.6692, loss: 0.2458
2023-11-21 21:43:08,754 - mmseg - INFO - Iter [850/5000]	lr: 8.612e-05, eta: 0:50:50, time: 0.680, data_time: 0.071, memory: 17708, decode.loss_focal: 0.0017, decode.loss_dice: 0.2372, decode.acc_seg: 99.6942, loss: 0.2389
2023-11-21 21:43:45,913 - mmseg - INFO - Iter [900/5000]	lr: 8.530e-05, eta: 0:50:15, time: 0.743, data_time: 0.136, memory: 17708, decode.loss_focal: 0.0016, decode.loss_dice: 0.2294, decode.acc_seg: 99.6862, loss: 0.2310
2023-11-21 21:44:20,187 - mmseg - INFO - Iter [950/5000]	lr: 8.447e-05, eta: 0:49:27, time: 0.685, data_time: 0.085, memory: 17708, decode.loss_focal: 0.0015, decode.loss_dice: 0.2252, decode.acc_seg: 99.7098, loss: 0.2267
2023-11-21 21:44:57,265 - mmseg - INFO - Exp name: unet_all.py
2023-11-21 21:44:57,266 - mmseg - INFO - Iter [1000/5000]	lr: 8.364e-05, eta: 0:48:52, time: 0.742, data_time: 0.136, memory: 17708, decode.loss_focal: 0.0013, decode.loss_dice: 0.2216, decode.acc_seg: 99.7182, loss: 0.2229
2023-11-21 21:45:15,681 - mmseg - INFO - per class results:
2023-11-21 21:45:15,682 - mmseg - INFO - 
+------------+-------+-------+-------+-------+-------+--------+-----------+--------+-------+
|   Class    |  IoU  |  VOE  |  ASD  |  MSSD |  Acc  | Fscore | Precision | Recall |  Dice |
+------------+-------+-------+-------+-------+-------+--------+-----------+--------+-------+
| background | 99.92 | 70.45 | 71.87 |  70.4 | 99.88 | 99.94  |   99.96   | 99.92  | 99.91 |
|  scratch   | 81.29 | 89.08 | 73.33 |  77.7 | 71.79 | 79.49  |    78.0   | 81.19  | 69.24 |
|   stain    | 92.71 | 77.66 |  72.3 | 72.56 | 91.15 | 93.77  |   93.44   |  94.1  | 90.65 |
| edgeDamage | 87.18 | 83.19 | 72.97 |  75.9 | 90.47 | 87.73  |   83.41   | 93.65  |  81.6 |
+------------+-------+-------+-------+-------+-------+--------+-----------+--------+-------+
2023-11-21 21:45:15,682 - mmseg - INFO - Summary:
2023-11-21 21:45:15,682 - mmseg - INFO - 
+-------+-------+-------+-------+-------+-------+---------+------------+---------+-------+
|  aAcc |  mIoU |  mVOE |  mASD | mMSSD |  mAcc | mFscore | mPrecision | mRecall | mDice |
+-------+-------+-------+-------+-------+-------+---------+------------+---------+-------+
| 99.92 | 90.28 | 80.09 | 72.61 | 74.14 | 88.32 |  90.23  |    88.7    |  92.22  | 85.35 |
+-------+-------+-------+-------+-------+-------+---------+------------+---------+-------+
2023-11-21 21:45:15,698 - mmseg - INFO - Exp name: unet_all.py
2023-11-21 21:45:15,698 - mmseg - INFO - Iter(val) [83]	aAcc: 0.9992, mIoU: 0.9028, mVOE: 0.8009, mASD: 0.7261, mMSSD: 0.7414, mAcc: 0.8832, mFscore: 0.9023, mPrecision: 0.8870, mRecall: 0.9222, mDice: 0.8535, IoU.background: 0.9992, IoU.scratch: 0.8129, IoU.stain: 0.9271, IoU.edgeDamage: 0.8718, VOE.background: 0.7045, VOE.scratch: 0.8908, VOE.stain: 0.7766, VOE.edgeDamage: 0.8319, ASD.background: 0.7187, ASD.scratch: 0.7333, ASD.stain: 0.7230, ASD.edgeDamage: 0.7297, MSSD.background: 0.7040, MSSD.scratch: 0.7770, MSSD.stain: 0.7256, MSSD.edgeDamage: 0.7590, Acc.background: 0.9988, Acc.scratch: 0.7179, Acc.stain: 0.9115, Acc.edgeDamage: 0.9047, Fscore.background: 0.9994, Fscore.scratch: 0.7949, Fscore.stain: 0.9377, Fscore.edgeDamage: 0.8773, Precision.background: 0.9996, Precision.scratch: 0.7800, Precision.stain: 0.9344, Precision.edgeDamage: 0.8341, Recall.background: 0.9992, Recall.scratch: 0.8119, Recall.stain: 0.9410, Recall.edgeDamage: 0.9365, Dice.background: 0.9991, Dice.scratch: 0.6924, Dice.stain: 0.9065, Dice.edgeDamage: 0.8160
2023-11-21 21:45:49,604 - mmseg - INFO - Iter [1050/5000]	lr: 8.281e-05, eta: 0:49:15, time: 1.047, data_time: 0.440, memory: 17708, decode.loss_focal: 0.0012, decode.loss_dice: 0.2109, decode.acc_seg: 99.7415, loss: 0.2121
2023-11-21 21:46:26,497 - mmseg - INFO - Iter [1100/5000]	lr: 8.198e-05, eta: 0:48:36, time: 0.738, data_time: 0.131, memory: 17708, decode.loss_focal: 0.0012, decode.loss_dice: 0.2076, decode.acc_seg: 99.7283, loss: 0.2088
2023-11-21 21:47:00,443 - mmseg - INFO - Iter [1150/5000]	lr: 8.115e-05, eta: 0:47:47, time: 0.679, data_time: 0.070, memory: 17708, decode.loss_focal: 0.0012, decode.loss_dice: 0.2060, decode.acc_seg: 99.7258, loss: 0.2072
2023-11-21 21:47:37,701 - mmseg - INFO - Iter [1200/5000]	lr: 8.032e-05, eta: 0:47:09, time: 0.745, data_time: 0.138, memory: 17708, decode.loss_focal: 0.0011, decode.loss_dice: 0.1996, decode.acc_seg: 99.7285, loss: 0.2008
2023-11-21 21:48:11,702 - mmseg - INFO - Iter [1250/5000]	lr: 7.949e-05, eta: 0:46:23, time: 0.680, data_time: 0.071, memory: 17708, decode.loss_focal: 0.0011, decode.loss_dice: 0.2084, decode.acc_seg: 99.7181, loss: 0.2095
2023-11-21 21:48:49,073 - mmseg - INFO - Iter [1300/5000]	lr: 7.865e-05, eta: 0:45:46, time: 0.747, data_time: 0.144, memory: 17708, decode.loss_focal: 0.0011, decode.loss_dice: 0.1932, decode.acc_seg: 99.7243, loss: 0.1943
2023-11-21 21:49:23,113 - mmseg - INFO - Iter [1350/5000]	lr: 7.782e-05, eta: 0:45:01, time: 0.681, data_time: 0.071, memory: 17708, decode.loss_focal: 0.0010, decode.loss_dice: 0.1927, decode.acc_seg: 99.7376, loss: 0.1937
2023-11-21 21:50:00,330 - mmseg - INFO - Iter [1400/5000]	lr: 7.698e-05, eta: 0:44:24, time: 0.744, data_time: 0.135, memory: 17708, decode.loss_focal: 0.0009, decode.loss_dice: 0.1911, decode.acc_seg: 99.7389, loss: 0.1920
2023-11-21 21:50:34,660 - mmseg - INFO - Iter [1450/5000]	lr: 7.614e-05, eta: 0:43:41, time: 0.687, data_time: 0.078, memory: 17708, decode.loss_focal: 0.0009, decode.loss_dice: 0.1849, decode.acc_seg: 99.7486, loss: 0.1858
2023-11-21 21:51:11,898 - mmseg - INFO - Iter [1500/5000]	lr: 7.530e-05, eta: 0:43:05, time: 0.745, data_time: 0.136, memory: 17708, decode.loss_focal: 0.0009, decode.loss_dice: 0.1839, decode.acc_seg: 99.7438, loss: 0.1848
2023-11-21 21:51:30,665 - mmseg - INFO - per class results:
2023-11-21 21:51:30,666 - mmseg - INFO - 
+------------+-------+-------+-------+-------+-------+--------+-----------+--------+-------+
|   Class    |  IoU  |  VOE  |  ASD  |  MSSD |  Acc  | Fscore | Precision | Recall |  Dice |
+------------+-------+-------+-------+-------+-------+--------+-----------+--------+-------+
| background | 99.93 | 70.44 | 71.86 | 70.39 | 99.91 | 99.95  |   99.96   | 99.94  | 99.92 |
|  scratch   | 83.33 | 87.04 | 73.05 | 76.31 | 73.27 | 82.61  |   83.05   | 82.18  | 73.91 |
|   stain    | 92.05 | 78.32 | 72.47 | 73.42 | 86.28 | 93.11  |   95.68   | 90.85  | 89.66 |
| edgeDamage | 88.07 |  82.3 |  72.9 | 75.57 | 92.15 | 88.79  |    84.4   | 94.77  | 83.19 |
+------------+-------+-------+-------+-------+-------+--------+-----------+--------+-------+
2023-11-21 21:51:30,667 - mmseg - INFO - Summary:
2023-11-21 21:51:30,667 - mmseg - INFO - 
+-------+-------+-------+-------+-------+------+---------+------------+---------+-------+
|  aAcc |  mIoU |  mVOE |  mASD | mMSSD | mAcc | mFscore | mPrecision | mRecall | mDice |
+-------+-------+-------+-------+-------+------+---------+------------+---------+-------+
| 99.93 | 90.84 | 79.53 | 72.57 | 73.92 | 87.9 |  91.11  |   90.77    |  91.93  | 86.67 |
+-------+-------+-------+-------+-------+------+---------+------------+---------+-------+
2023-11-21 21:51:30,681 - mmseg - INFO - Iter(val) [83]	aAcc: 0.9993, mIoU: 0.9084, mVOE: 0.7953, mASD: 0.7257, mMSSD: 0.7392, mAcc: 0.8790, mFscore: 0.9111, mPrecision: 0.9077, mRecall: 0.9193, mDice: 0.8667, IoU.background: 0.9993, IoU.scratch: 0.8333, IoU.stain: 0.9205, IoU.edgeDamage: 0.8807, VOE.background: 0.7044, VOE.scratch: 0.8704, VOE.stain: 0.7832, VOE.edgeDamage: 0.8230, ASD.background: 0.7186, ASD.scratch: 0.7305, ASD.stain: 0.7247, ASD.edgeDamage: 0.7290, MSSD.background: 0.7039, MSSD.scratch: 0.7631, MSSD.stain: 0.7342, MSSD.edgeDamage: 0.7557, Acc.background: 0.9991, Acc.scratch: 0.7327, Acc.stain: 0.8628, Acc.edgeDamage: 0.9215, Fscore.background: 0.9995, Fscore.scratch: 0.8261, Fscore.stain: 0.9311, Fscore.edgeDamage: 0.8879, Precision.background: 0.9996, Precision.scratch: 0.8305, Precision.stain: 0.9568, Precision.edgeDamage: 0.8440, Recall.background: 0.9994, Recall.scratch: 0.8218, Recall.stain: 0.9085, Recall.edgeDamage: 0.9477, Dice.background: 0.9992, Dice.scratch: 0.7391, Dice.stain: 0.8966, Dice.edgeDamage: 0.8319
2023-11-21 21:52:04,563 - mmseg - INFO - Iter [1550/5000]	lr: 7.446e-05, eta: 0:43:03, time: 1.053, data_time: 0.446, memory: 17708, decode.loss_focal: 0.0008, decode.loss_dice: 0.1793, decode.acc_seg: 99.7576, loss: 0.1801
2023-11-21 21:52:47,521 - mmseg - INFO - Iter [1600/5000]	lr: 7.362e-05, eta: 0:42:37, time: 0.859, data_time: 0.262, memory: 17708, decode.loss_focal: 0.0008, decode.loss_dice: 0.1784, decode.acc_seg: 99.7565, loss: 0.1792
2023-11-21 21:53:23,602 - mmseg - INFO - Iter [1650/5000]	lr: 7.278e-05, eta: 0:41:56, time: 0.722, data_time: 0.114, memory: 17708, decode.loss_focal: 0.0008, decode.loss_dice: 0.1779, decode.acc_seg: 99.7416, loss: 0.1787
2023-11-21 21:54:00,673 - mmseg - INFO - Iter [1700/5000]	lr: 7.194e-05, eta: 0:41:18, time: 0.741, data_time: 0.132, memory: 17708, decode.loss_focal: 0.0008, decode.loss_dice: 0.1759, decode.acc_seg: 99.7649, loss: 0.1767
2023-11-21 21:54:37,800 - mmseg - INFO - Iter [1750/5000]	lr: 7.109e-05, eta: 0:40:39, time: 0.743, data_time: 0.137, memory: 17708, decode.loss_focal: 0.0007, decode.loss_dice: 0.1719, decode.acc_seg: 99.7629, loss: 0.1727
2023-11-21 21:55:11,789 - mmseg - INFO - Iter [1800/5000]	lr: 7.025e-05, eta: 0:39:56, time: 0.680, data_time: 0.070, memory: 17708, decode.loss_focal: 0.0007, decode.loss_dice: 0.1768, decode.acc_seg: 99.7584, loss: 0.1775
2023-11-21 21:55:48,797 - mmseg - INFO - Iter [1850/5000]	lr: 6.940e-05, eta: 0:39:17, time: 0.740, data_time: 0.131, memory: 17708, decode.loss_focal: 0.0007, decode.loss_dice: 0.1694, decode.acc_seg: 99.7641, loss: 0.1701
2023-11-21 21:56:22,772 - mmseg - INFO - Iter [1900/5000]	lr: 6.855e-05, eta: 0:38:34, time: 0.679, data_time: 0.072, memory: 17708, decode.loss_focal: 0.0007, decode.loss_dice: 0.1731, decode.acc_seg: 99.7582, loss: 0.1738
2023-11-21 21:56:59,924 - mmseg - INFO - Iter [1950/5000]	lr: 6.770e-05, eta: 0:37:57, time: 0.743, data_time: 0.135, memory: 17708, decode.loss_focal: 0.0007, decode.loss_dice: 0.1722, decode.acc_seg: 99.7660, loss: 0.1729
2023-11-21 21:57:33,899 - mmseg - INFO - Exp name: unet_all.py
2023-11-21 21:57:33,900 - mmseg - INFO - Iter [2000/5000]	lr: 6.685e-05, eta: 0:37:14, time: 0.680, data_time: 0.070, memory: 17708, decode.loss_focal: 0.0007, decode.loss_dice: 0.1664, decode.acc_seg: 99.7707, loss: 0.1671
2023-11-21 21:57:51,551 - mmseg - INFO - per class results:
2023-11-21 21:57:51,552 - mmseg - INFO - 
+------------+-------+-------+-------+-------+-------+--------+-----------+--------+-------+
|   Class    |  IoU  |  VOE  |  ASD  |  MSSD |  Acc  | Fscore | Precision | Recall |  Dice |
+------------+-------+-------+-------+-------+-------+--------+-----------+--------+-------+
| background | 99.93 | 70.44 | 71.86 | 70.39 | 99.91 | 99.95  |   99.96   | 99.94  | 99.92 |
|  scratch   | 83.48 | 86.89 | 73.23 | 77.21 | 69.23 | 82.82  |   87.22   | 79.49  | 74.22 |
|   stain    | 93.05 | 77.32 | 72.37 |  72.9 |  88.6 | 94.09  |   95.95   |  92.4  | 91.14 |
| edgeDamage |  87.2 | 83.17 | 73.02 | 76.15 | 92.77 | 87.75  |   82.67   | 95.18  | 81.63 |
+------------+-------+-------+-------+-------+-------+--------+-----------+--------+-------+
2023-11-21 21:57:51,552 - mmseg - INFO - Summary:
2023-11-21 21:57:51,552 - mmseg - INFO - 
+-------+-------+-------+-------+-------+-------+---------+------------+---------+-------+
|  aAcc |  mIoU |  mVOE |  mASD | mMSSD |  mAcc | mFscore | mPrecision | mRecall | mDice |
+-------+-------+-------+-------+-------+-------+---------+------------+---------+-------+
| 99.93 | 90.91 | 79.46 | 72.62 | 74.16 | 87.63 |  91.15  |   91.45    |  91.75  | 86.73 |
+-------+-------+-------+-------+-------+-------+---------+------------+---------+-------+
2023-11-21 21:57:51,566 - mmseg - INFO - Exp name: unet_all.py
2023-11-21 21:57:51,566 - mmseg - INFO - Iter(val) [83]	aAcc: 0.9993, mIoU: 0.9091, mVOE: 0.7946, mASD: 0.7262, mMSSD: 0.7416, mAcc: 0.8763, mFscore: 0.9115, mPrecision: 0.9145, mRecall: 0.9175, mDice: 0.8673, IoU.background: 0.9993, IoU.scratch: 0.8348, IoU.stain: 0.9305, IoU.edgeDamage: 0.8720, VOE.background: 0.7044, VOE.scratch: 0.8689, VOE.stain: 0.7732, VOE.edgeDamage: 0.8317, ASD.background: 0.7186, ASD.scratch: 0.7323, ASD.stain: 0.7237, ASD.edgeDamage: 0.7302, MSSD.background: 0.7039, MSSD.scratch: 0.7721, MSSD.stain: 0.7290, MSSD.edgeDamage: 0.7615, Acc.background: 0.9991, Acc.scratch: 0.6923, Acc.stain: 0.8860, Acc.edgeDamage: 0.9277, Fscore.background: 0.9995, Fscore.scratch: 0.8282, Fscore.stain: 0.9409, Fscore.edgeDamage: 0.8775, Precision.background: 0.9996, Precision.scratch: 0.8722, Precision.stain: 0.9595, Precision.edgeDamage: 0.8267, Recall.background: 0.9994, Recall.scratch: 0.7949, Recall.stain: 0.9240, Recall.edgeDamage: 0.9518, Dice.background: 0.9992, Dice.scratch: 0.7422, Dice.stain: 0.9114, Dice.edgeDamage: 0.8163
2023-11-21 21:58:28,545 - mmseg - INFO - Iter [2050/5000]	lr: 6.599e-05, eta: 0:37:02, time: 1.093, data_time: 0.487, memory: 17708, decode.loss_focal: 0.0007, decode.loss_dice: 0.1689, decode.acc_seg: 99.7774, loss: 0.1695
2023-11-21 21:59:02,483 - mmseg - INFO - Iter [2100/5000]	lr: 6.514e-05, eta: 0:36:19, time: 0.679, data_time: 0.071, memory: 17708, decode.loss_focal: 0.0007, decode.loss_dice: 0.1761, decode.acc_seg: 99.7597, loss: 0.1768
2023-11-21 21:59:39,402 - mmseg - INFO - Iter [2150/5000]	lr: 6.428e-05, eta: 0:35:41, time: 0.738, data_time: 0.132, memory: 17708, decode.loss_focal: 0.0007, decode.loss_dice: 0.1776, decode.acc_seg: 99.7527, loss: 0.1783
2023-11-21 22:00:13,355 - mmseg - INFO - Iter [2200/5000]	lr: 6.343e-05, eta: 0:34:59, time: 0.679, data_time: 0.071, memory: 17708, decode.loss_focal: 0.0007, decode.loss_dice: 0.1765, decode.acc_seg: 99.7437, loss: 0.1773
2023-11-21 22:00:50,334 - mmseg - INFO - Iter [2250/5000]	lr: 6.257e-05, eta: 0:34:21, time: 0.740, data_time: 0.132, memory: 17708, decode.loss_focal: 0.0007, decode.loss_dice: 0.1747, decode.acc_seg: 99.7500, loss: 0.1754
2023-11-21 22:01:24,375 - mmseg - INFO - Iter [2300/5000]	lr: 6.171e-05, eta: 0:33:39, time: 0.681, data_time: 0.074, memory: 17708, decode.loss_focal: 0.0007, decode.loss_dice: 0.1666, decode.acc_seg: 99.7665, loss: 0.1673
2023-11-21 22:02:01,515 - mmseg - INFO - Iter [2350/5000]	lr: 6.084e-05, eta: 0:33:01, time: 0.743, data_time: 0.135, memory: 17708, decode.loss_focal: 0.0006, decode.loss_dice: 0.1598, decode.acc_seg: 99.7815, loss: 0.1604
2023-11-21 22:02:42,963 - mmseg - INFO - Iter [2400/5000]	lr: 5.998e-05, eta: 0:32:28, time: 0.829, data_time: 0.226, memory: 17708, decode.loss_focal: 0.0007, decode.loss_dice: 0.1678, decode.acc_seg: 99.7744, loss: 0.1684
2023-11-21 22:03:19,974 - mmseg - INFO - Iter [2450/5000]	lr: 5.911e-05, eta: 0:31:50, time: 0.740, data_time: 0.133, memory: 17708, decode.loss_focal: 0.0007, decode.loss_dice: 0.1666, decode.acc_seg: 99.7588, loss: 0.1673
2023-11-21 22:03:53,929 - mmseg - INFO - Iter [2500/5000]	lr: 5.825e-05, eta: 0:31:09, time: 0.679, data_time: 0.070, memory: 17708, decode.loss_focal: 0.0006, decode.loss_dice: 0.1617, decode.acc_seg: 99.7856, loss: 0.1624
2023-11-21 22:04:12,109 - mmseg - INFO - per class results:
2023-11-21 22:04:12,111 - mmseg - INFO - 
+------------+-------+-------+-------+-------+-------+--------+-----------+--------+-------+
|   Class    |  IoU  |  VOE  |  ASD  |  MSSD |  Acc  | Fscore | Precision | Recall |  Dice |
+------------+-------+-------+-------+-------+-------+--------+-----------+--------+-------+
| background | 99.91 | 70.46 | 71.87 |  70.4 | 99.85 | 99.93  |   99.96   |  99.9  | 99.89 |
|  scratch   | 83.18 | 87.19 |  73.2 | 77.06 | 69.91 | 82.38  |   85.37   | 79.94  | 73.57 |
|   stain    | 89.52 | 80.86 | 72.74 | 74.76 | 80.24 | 90.45  |   95.01   | 86.83  | 85.67 |
| edgeDamage | 84.07 |  86.3 | 73.42 | 78.15 | 96.38 | 83.66  |   76.67   | 97.58  |  75.5 |
+------------+-------+-------+-------+-------+-------+--------+-----------+--------+-------+
2023-11-21 22:04:12,112 - mmseg - INFO - Summary:
2023-11-21 22:04:12,113 - mmseg - INFO - 
+-------+-------+------+------+-------+-------+---------+------------+---------+-------+
|  aAcc |  mIoU | mVOE | mASD | mMSSD |  mAcc | mFscore | mPrecision | mRecall | mDice |
+-------+-------+------+------+-------+-------+---------+------------+---------+-------+
| 99.91 | 89.17 | 81.2 | 72.8 | 75.09 | 86.59 |  89.11  |   89.25    |  91.06  | 83.66 |
+-------+-------+------+------+-------+-------+---------+------------+---------+-------+
2023-11-21 22:04:12,130 - mmseg - INFO - Iter(val) [83]	aAcc: 0.9991, mIoU: 0.8917, mVOE: 0.8120, mASD: 0.7280, mMSSD: 0.7509, mAcc: 0.8659, mFscore: 0.8911, mPrecision: 0.8925, mRecall: 0.9106, mDice: 0.8366, IoU.background: 0.9991, IoU.scratch: 0.8318, IoU.stain: 0.8952, IoU.edgeDamage: 0.8407, VOE.background: 0.7046, VOE.scratch: 0.8719, VOE.stain: 0.8086, VOE.edgeDamage: 0.8630, ASD.background: 0.7187, ASD.scratch: 0.7320, ASD.stain: 0.7274, ASD.edgeDamage: 0.7342, MSSD.background: 0.7040, MSSD.scratch: 0.7706, MSSD.stain: 0.7476, MSSD.edgeDamage: 0.7815, Acc.background: 0.9985, Acc.scratch: 0.6991, Acc.stain: 0.8024, Acc.edgeDamage: 0.9638, Fscore.background: 0.9993, Fscore.scratch: 0.8238, Fscore.stain: 0.9045, Fscore.edgeDamage: 0.8366, Precision.background: 0.9996, Precision.scratch: 0.8537, Precision.stain: 0.9501, Precision.edgeDamage: 0.7667, Recall.background: 0.9990, Recall.scratch: 0.7994, Recall.stain: 0.8683, Recall.edgeDamage: 0.9758, Dice.background: 0.9989, Dice.scratch: 0.7357, Dice.stain: 0.8567, Dice.edgeDamage: 0.7550
2023-11-21 22:04:49,319 - mmseg - INFO - Iter [2550/5000]	lr: 5.738e-05, eta: 0:30:49, time: 1.108, data_time: 0.502, memory: 17708, decode.loss_focal: 0.0007, decode.loss_dice: 0.1747, decode.acc_seg: 99.7594, loss: 0.1754
2023-11-21 22:05:23,302 - mmseg - INFO - Iter [2600/5000]	lr: 5.651e-05, eta: 0:30:08, time: 0.680, data_time: 0.071, memory: 17708, decode.loss_focal: 0.0007, decode.loss_dice: 0.1713, decode.acc_seg: 99.7664, loss: 0.1720
2023-11-21 22:06:00,358 - mmseg - INFO - Iter [2650/5000]	lr: 5.563e-05, eta: 0:29:30, time: 0.741, data_time: 0.134, memory: 17708, decode.loss_focal: 0.0006, decode.loss_dice: 0.1572, decode.acc_seg: 99.7892, loss: 0.1578
2023-11-21 22:06:34,350 - mmseg - INFO - Iter [2700/5000]	lr: 5.476e-05, eta: 0:28:49, time: 0.680, data_time: 0.071, memory: 17708, decode.loss_focal: 0.0006, decode.loss_dice: 0.1610, decode.acc_seg: 99.7876, loss: 0.1616
2023-11-21 22:07:11,461 - mmseg - INFO - Iter [2750/5000]	lr: 5.388e-05, eta: 0:28:11, time: 0.742, data_time: 0.136, memory: 17708, decode.loss_focal: 0.0006, decode.loss_dice: 0.1574, decode.acc_seg: 99.7930, loss: 0.1580
2023-11-21 22:07:45,617 - mmseg - INFO - Iter [2800/5000]	lr: 5.301e-05, eta: 0:27:31, time: 0.683, data_time: 0.076, memory: 17708, decode.loss_focal: 0.0006, decode.loss_dice: 0.1578, decode.acc_seg: 99.7877, loss: 0.1584
2023-11-21 22:08:22,675 - mmseg - INFO - Iter [2850/5000]	lr: 5.213e-05, eta: 0:26:53, time: 0.741, data_time: 0.133, memory: 17708, decode.loss_focal: 0.0006, decode.loss_dice: 0.1565, decode.acc_seg: 99.7810, loss: 0.1571
2023-11-21 22:08:56,866 - mmseg - INFO - Iter [2900/5000]	lr: 5.124e-05, eta: 0:26:13, time: 0.684, data_time: 0.076, memory: 17708, decode.loss_focal: 0.0006, decode.loss_dice: 0.1528, decode.acc_seg: 99.7993, loss: 0.1533
2023-11-21 22:09:33,986 - mmseg - INFO - Iter [2950/5000]	lr: 5.036e-05, eta: 0:25:35, time: 0.742, data_time: 0.135, memory: 17708, decode.loss_focal: 0.0006, decode.loss_dice: 0.1521, decode.acc_seg: 99.7971, loss: 0.1527
2023-11-21 22:10:07,911 - mmseg - INFO - Exp name: unet_all.py
2023-11-21 22:10:07,911 - mmseg - INFO - Iter [3000/5000]	lr: 4.947e-05, eta: 0:24:55, time: 0.678, data_time: 0.069, memory: 17708, decode.loss_focal: 0.0006, decode.loss_dice: 0.1547, decode.acc_seg: 99.8014, loss: 0.1552
2023-11-21 22:10:25,746 - mmseg - INFO - per class results:
2023-11-21 22:10:25,747 - mmseg - INFO - 
+------------+-------+-------+-------+-------+-------+--------+-----------+--------+-------+
|   Class    |  IoU  |  VOE  |  ASD  |  MSSD |  Acc  | Fscore | Precision | Recall |  Dice |
+------------+-------+-------+-------+-------+-------+--------+-----------+--------+-------+
| background | 99.94 | 70.43 | 71.86 | 70.39 | 99.93 | 99.96  |   99.96   | 99.95  | 99.93 |
|  scratch   | 83.88 | 86.49 | 73.14 | 76.75 |  71.3 | 83.39  |   86.47   | 80.87  | 75.08 |
|   stain    | 92.87 |  77.5 |  72.3 | 72.56 | 90.16 | 93.92  |   94.42   | 93.44  | 90.89 |
| edgeDamage |  89.4 | 80.97 | 72.71 | 74.64 | 91.22 | 90.32  |   87.18   | 94.15  | 85.48 |
+------------+-------+-------+-------+-------+-------+--------+-----------+--------+-------+
2023-11-21 22:10:25,747 - mmseg - INFO - Summary:
2023-11-21 22:10:25,747 - mmseg - INFO - 
+-------+-------+-------+------+-------+-------+---------+------------+---------+-------+
|  aAcc |  mIoU |  mVOE | mASD | mMSSD |  mAcc | mFscore | mPrecision | mRecall | mDice |
+-------+-------+-------+------+-------+-------+---------+------------+---------+-------+
| 99.94 | 91.52 | 78.85 | 72.5 | 73.58 | 88.15 |   91.9  |   92.01    |   92.1  | 87.84 |
+-------+-------+-------+------+-------+-------+---------+------------+---------+-------+
2023-11-21 22:10:25,762 - mmseg - INFO - Exp name: unet_all.py
2023-11-21 22:10:25,762 - mmseg - INFO - Iter(val) [83]	aAcc: 0.9994, mIoU: 0.9152, mVOE: 0.7885, mASD: 0.7250, mMSSD: 0.7358, mAcc: 0.8815, mFscore: 0.9190, mPrecision: 0.9201, mRecall: 0.9210, mDice: 0.8784, IoU.background: 0.9994, IoU.scratch: 0.8388, IoU.stain: 0.9287, IoU.edgeDamage: 0.8940, VOE.background: 0.7043, VOE.scratch: 0.8649, VOE.stain: 0.7750, VOE.edgeDamage: 0.8097, ASD.background: 0.7186, ASD.scratch: 0.7314, ASD.stain: 0.7230, ASD.edgeDamage: 0.7271, MSSD.background: 0.7039, MSSD.scratch: 0.7675, MSSD.stain: 0.7256, MSSD.edgeDamage: 0.7464, Acc.background: 0.9993, Acc.scratch: 0.7130, Acc.stain: 0.9016, Acc.edgeDamage: 0.9122, Fscore.background: 0.9996, Fscore.scratch: 0.8339, Fscore.stain: 0.9392, Fscore.edgeDamage: 0.9032, Precision.background: 0.9996, Precision.scratch: 0.8647, Precision.stain: 0.9442, Precision.edgeDamage: 0.8718, Recall.background: 0.9995, Recall.scratch: 0.8087, Recall.stain: 0.9344, Recall.edgeDamage: 0.9415, Dice.background: 0.9993, Dice.scratch: 0.7508, Dice.stain: 0.9089, Dice.edgeDamage: 0.8548
2023-11-21 22:11:02,628 - mmseg - INFO - Iter [3050/5000]	lr: 4.858e-05, eta: 0:24:29, time: 1.094, data_time: 0.491, memory: 17708, decode.loss_focal: 0.0006, decode.loss_dice: 0.1495, decode.acc_seg: 99.7944, loss: 0.1500
2023-11-21 22:11:36,683 - mmseg - INFO - Iter [3100/5000]	lr: 4.769e-05, eta: 0:23:49, time: 0.681, data_time: 0.073, memory: 17708, decode.loss_focal: 0.0006, decode.loss_dice: 0.1522, decode.acc_seg: 99.8036, loss: 0.1527
2023-11-21 22:12:13,684 - mmseg - INFO - Iter [3150/5000]	lr: 4.680e-05, eta: 0:23:11, time: 0.740, data_time: 0.132, memory: 17708, decode.loss_focal: 0.0005, decode.loss_dice: 0.1497, decode.acc_seg: 99.8028, loss: 0.1503
2023-11-21 22:12:47,641 - mmseg - INFO - Iter [3200/5000]	lr: 4.590e-05, eta: 0:22:32, time: 0.679, data_time: 0.070, memory: 17708, decode.loss_focal: 0.0005, decode.loss_dice: 0.1532, decode.acc_seg: 99.8020, loss: 0.1537
2023-11-21 22:13:24,687 - mmseg - INFO - Iter [3250/5000]	lr: 4.500e-05, eta: 0:21:54, time: 0.741, data_time: 0.133, memory: 17708, decode.loss_focal: 0.0005, decode.loss_dice: 0.1521, decode.acc_seg: 99.7945, loss: 0.1527
2023-11-21 22:13:58,629 - mmseg - INFO - Iter [3300/5000]	lr: 4.410e-05, eta: 0:21:14, time: 0.679, data_time: 0.070, memory: 17708, decode.loss_focal: 0.0005, decode.loss_dice: 0.1475, decode.acc_seg: 99.8088, loss: 0.1480
2023-11-21 22:14:35,684 - mmseg - INFO - Iter [3350/5000]	lr: 4.320e-05, eta: 0:20:37, time: 0.741, data_time: 0.131, memory: 17708, decode.loss_focal: 0.0005, decode.loss_dice: 0.1498, decode.acc_seg: 99.8068, loss: 0.1503
2023-11-21 22:15:12,769 - mmseg - INFO - Iter [3400/5000]	lr: 4.229e-05, eta: 0:19:59, time: 0.742, data_time: 0.135, memory: 17708, decode.loss_focal: 0.0005, decode.loss_dice: 0.1493, decode.acc_seg: 99.8131, loss: 0.1498
2023-11-21 22:15:46,753 - mmseg - INFO - Iter [3450/5000]	lr: 4.138e-05, eta: 0:19:20, time: 0.680, data_time: 0.071, memory: 17708, decode.loss_focal: 0.0005, decode.loss_dice: 0.1510, decode.acc_seg: 99.8056, loss: 0.1515
2023-11-21 22:16:23,723 - mmseg - INFO - Iter [3500/5000]	lr: 4.047e-05, eta: 0:18:42, time: 0.739, data_time: 0.133, memory: 17708, decode.loss_focal: 0.0006, decode.loss_dice: 0.1535, decode.acc_seg: 99.7955, loss: 0.1541
2023-11-21 22:16:42,082 - mmseg - INFO - per class results:
2023-11-21 22:16:42,083 - mmseg - INFO - 
+------------+-------+-------+-------+-------+-------+--------+-----------+--------+-------+
|   Class    |  IoU  |  VOE  |  ASD  |  MSSD |  Acc  | Fscore | Precision | Recall |  Dice |
+------------+-------+-------+-------+-------+-------+--------+-----------+--------+-------+
| background | 99.93 | 70.44 | 71.86 | 70.39 | 99.91 | 99.95  |   99.96   | 99.94  | 99.93 |
|  scratch   | 84.33 | 86.04 | 73.11 | 76.61 | 71.94 | 84.03  |   87.42   | 81.29  | 76.04 |
|   stain    | 92.84 | 77.53 |  72.3 | 72.57 | 91.57 | 93.89  |   93.42   | 94.38  | 90.84 |
| edgeDamage | 87.46 | 82.91 | 72.97 | 75.91 | 92.01 | 88.07  |   83.38   | 94.68  | 82.11 |
+------------+-------+-------+-------+-------+-------+--------+-----------+--------+-------+
2023-11-21 22:16:42,083 - mmseg - INFO - Summary:
2023-11-21 22:16:42,083 - mmseg - INFO - 
+-------+-------+-------+-------+-------+-------+---------+------------+---------+-------+
|  aAcc |  mIoU |  mVOE |  mASD | mMSSD |  mAcc | mFscore | mPrecision | mRecall | mDice |
+-------+-------+-------+-------+-------+-------+---------+------------+---------+-------+
| 99.93 | 91.14 | 79.23 | 72.56 | 73.87 | 88.86 |  91.49  |   91.04    |  92.57  | 87.23 |
+-------+-------+-------+-------+-------+-------+---------+------------+---------+-------+
2023-11-21 22:16:42,096 - mmseg - INFO - Iter(val) [83]	aAcc: 0.9993, mIoU: 0.9114, mVOE: 0.7923, mASD: 0.7256, mMSSD: 0.7387, mAcc: 0.8886, mFscore: 0.9149, mPrecision: 0.9104, mRecall: 0.9257, mDice: 0.8723, IoU.background: 0.9993, IoU.scratch: 0.8433, IoU.stain: 0.9284, IoU.edgeDamage: 0.8746, VOE.background: 0.7044, VOE.scratch: 0.8604, VOE.stain: 0.7753, VOE.edgeDamage: 0.8291, ASD.background: 0.7186, ASD.scratch: 0.7311, ASD.stain: 0.7230, ASD.edgeDamage: 0.7297, MSSD.background: 0.7039, MSSD.scratch: 0.7661, MSSD.stain: 0.7257, MSSD.edgeDamage: 0.7591, Acc.background: 0.9991, Acc.scratch: 0.7194, Acc.stain: 0.9157, Acc.edgeDamage: 0.9201, Fscore.background: 0.9995, Fscore.scratch: 0.8403, Fscore.stain: 0.9389, Fscore.edgeDamage: 0.8807, Precision.background: 0.9996, Precision.scratch: 0.8742, Precision.stain: 0.9342, Precision.edgeDamage: 0.8338, Recall.background: 0.9994, Recall.scratch: 0.8129, Recall.stain: 0.9438, Recall.edgeDamage: 0.9468, Dice.background: 0.9993, Dice.scratch: 0.7604, Dice.stain: 0.9084, Dice.edgeDamage: 0.8211
2023-11-21 22:17:15,925 - mmseg - INFO - Iter [3550/5000]	lr: 3.956e-05, eta: 0:18:11, time: 1.044, data_time: 0.437, memory: 17708, decode.loss_focal: 0.0005, decode.loss_dice: 0.1497, decode.acc_seg: 99.8058, loss: 0.1502
2023-11-21 22:17:52,975 - mmseg - INFO - Iter [3600/5000]	lr: 3.864e-05, eta: 0:17:33, time: 0.741, data_time: 0.135, memory: 17708, decode.loss_focal: 0.0006, decode.loss_dice: 0.1483, decode.acc_seg: 99.7960, loss: 0.1489
2023-11-21 22:18:27,025 - mmseg - INFO - Iter [3650/5000]	lr: 3.772e-05, eta: 0:16:54, time: 0.681, data_time: 0.073, memory: 17708, decode.loss_focal: 0.0005, decode.loss_dice: 0.1495, decode.acc_seg: 99.8092, loss: 0.1500
2023-11-21 22:19:03,959 - mmseg - INFO - Iter [3700/5000]	lr: 3.679e-05, eta: 0:16:16, time: 0.739, data_time: 0.131, memory: 17708, decode.loss_focal: 0.0006, decode.loss_dice: 0.1572, decode.acc_seg: 99.7846, loss: 0.1578
2023-11-21 22:19:37,956 - mmseg - INFO - Iter [3750/5000]	lr: 3.586e-05, eta: 0:15:37, time: 0.680, data_time: 0.072, memory: 17708, decode.loss_focal: 0.0005, decode.loss_dice: 0.1499, decode.acc_seg: 99.8067, loss: 0.1504
2023-11-21 22:20:15,087 - mmseg - INFO - Iter [3800/5000]	lr: 3.493e-05, eta: 0:15:00, time: 0.743, data_time: 0.136, memory: 17708, decode.loss_focal: 0.0005, decode.loss_dice: 0.1470, decode.acc_seg: 99.8158, loss: 0.1475
2023-11-21 22:20:49,088 - mmseg - INFO - Iter [3850/5000]	lr: 3.400e-05, eta: 0:14:21, time: 0.680, data_time: 0.073, memory: 17708, decode.loss_focal: 0.0005, decode.loss_dice: 0.1477, decode.acc_seg: 99.8020, loss: 0.1483
2023-11-21 22:21:26,109 - mmseg - INFO - Iter [3900/5000]	lr: 3.306e-05, eta: 0:13:44, time: 0.740, data_time: 0.132, memory: 17708, decode.loss_focal: 0.0005, decode.loss_dice: 0.1450, decode.acc_seg: 99.8106, loss: 0.1455
2023-11-21 22:22:00,104 - mmseg - INFO - Iter [3950/5000]	lr: 3.211e-05, eta: 0:13:05, time: 0.680, data_time: 0.071, memory: 17708, decode.loss_focal: 0.0005, decode.loss_dice: 0.1472, decode.acc_seg: 99.8077, loss: 0.1478
2023-11-21 22:22:37,091 - mmseg - INFO - Exp name: unet_all.py
2023-11-21 22:22:37,091 - mmseg - INFO - Iter [4000/5000]	lr: 3.116e-05, eta: 0:12:28, time: 0.740, data_time: 0.133, memory: 17708, decode.loss_focal: 0.0005, decode.loss_dice: 0.1450, decode.acc_seg: 99.8252, loss: 0.1455
2023-11-21 22:22:54,655 - mmseg - INFO - per class results:
2023-11-21 22:22:54,656 - mmseg - INFO - 
+------------+-------+-------+-------+-------+-------+--------+-----------+--------+-------+
|   Class    |  IoU  |  VOE  |  ASD  |  MSSD |  Acc  | Fscore | Precision | Recall |  Dice |
+------------+-------+-------+-------+-------+-------+--------+-----------+--------+-------+
| background | 99.95 | 70.42 | 71.86 | 70.39 | 99.93 | 99.96  |   99.96   | 99.96  | 99.94 |
|  scratch   | 85.14 | 85.23 | 72.94 | 75.77 | 75.72 | 85.13  |   86.58   | 83.81  |  77.7 |
|   stain    | 92.92 | 77.45 | 72.27 | 72.43 | 90.75 | 93.97  |   94.11   | 93.84  | 90.96 |
| edgeDamage | 90.45 | 79.92 | 72.61 | 74.11 | 91.92 | 91.46  |   88.78   | 94.61  | 87.19 |
+------------+-------+-------+-------+-------+-------+--------+-----------+--------+-------+
2023-11-21 22:22:54,656 - mmseg - INFO - Summary:
2023-11-21 22:22:54,656 - mmseg - INFO - 
+-------+-------+-------+-------+-------+-------+---------+------------+---------+-------+
|  aAcc |  mIoU |  mVOE |  mASD | mMSSD |  mAcc | mFscore | mPrecision | mRecall | mDice |
+-------+-------+-------+-------+-------+-------+---------+------------+---------+-------+
| 99.95 | 92.12 | 78.25 | 72.42 | 73.17 | 89.58 |  92.63  |   92.36    |  93.05  | 88.95 |
+-------+-------+-------+-------+-------+-------+---------+------------+---------+-------+
2023-11-21 22:22:54,671 - mmseg - INFO - Exp name: unet_all.py
2023-11-21 22:22:54,671 - mmseg - INFO - Iter(val) [83]	aAcc: 0.9995, mIoU: 0.9212, mVOE: 0.7825, mASD: 0.7242, mMSSD: 0.7317, mAcc: 0.8958, mFscore: 0.9263, mPrecision: 0.9236, mRecall: 0.9305, mDice: 0.8895, IoU.background: 0.9995, IoU.scratch: 0.8514, IoU.stain: 0.9292, IoU.edgeDamage: 0.9045, VOE.background: 0.7042, VOE.scratch: 0.8523, VOE.stain: 0.7745, VOE.edgeDamage: 0.7992, ASD.background: 0.7186, ASD.scratch: 0.7294, ASD.stain: 0.7227, ASD.edgeDamage: 0.7261, MSSD.background: 0.7039, MSSD.scratch: 0.7577, MSSD.stain: 0.7243, MSSD.edgeDamage: 0.7411, Acc.background: 0.9993, Acc.scratch: 0.7572, Acc.stain: 0.9075, Acc.edgeDamage: 0.9192, Fscore.background: 0.9996, Fscore.scratch: 0.8513, Fscore.stain: 0.9397, Fscore.edgeDamage: 0.9146, Precision.background: 0.9996, Precision.scratch: 0.8658, Precision.stain: 0.9411, Precision.edgeDamage: 0.8878, Recall.background: 0.9996, Recall.scratch: 0.8381, Recall.stain: 0.9384, Recall.edgeDamage: 0.9461, Dice.background: 0.9994, Dice.scratch: 0.7770, Dice.stain: 0.9096, Dice.edgeDamage: 0.8719
2023-11-21 22:23:28,550 - mmseg - INFO - Iter [4050/5000]	lr: 3.021e-05, eta: 0:11:54, time: 1.029, data_time: 0.421, memory: 17708, decode.loss_focal: 0.0005, decode.loss_dice: 0.1440, decode.acc_seg: 99.8175, loss: 0.1445
2023-11-21 22:24:05,553 - mmseg - INFO - Iter [4100/5000]	lr: 2.925e-05, eta: 0:11:16, time: 0.740, data_time: 0.133, memory: 17708, decode.loss_focal: 0.0005, decode.loss_dice: 0.1419, decode.acc_seg: 99.8275, loss: 0.1424
2023-11-21 22:24:39,538 - mmseg - INFO - Iter [4150/5000]	lr: 2.829e-05, eta: 0:10:38, time: 0.680, data_time: 0.070, memory: 17708, decode.loss_focal: 0.0005, decode.loss_dice: 0.1458, decode.acc_seg: 99.8106, loss: 0.1463
2023-11-21 22:25:16,887 - mmseg - INFO - Iter [4200/5000]	lr: 2.732e-05, eta: 0:10:00, time: 0.747, data_time: 0.143, memory: 17708, decode.loss_focal: 0.0005, decode.loss_dice: 0.1450, decode.acc_seg: 99.8103, loss: 0.1455
2023-11-21 22:25:50,832 - mmseg - INFO - Iter [4250/5000]	lr: 2.634e-05, eta: 0:09:22, time: 0.679, data_time: 0.070, memory: 17708, decode.loss_focal: 0.0005, decode.loss_dice: 0.1438, decode.acc_seg: 99.8149, loss: 0.1443
2023-11-21 22:26:27,972 - mmseg - INFO - Iter [4300/5000]	lr: 2.536e-05, eta: 0:08:44, time: 0.743, data_time: 0.137, memory: 17708, decode.loss_focal: 0.0005, decode.loss_dice: 0.1473, decode.acc_seg: 99.8083, loss: 0.1478
2023-11-21 22:27:01,967 - mmseg - INFO - Iter [4350/5000]	lr: 2.437e-05, eta: 0:08:06, time: 0.680, data_time: 0.070, memory: 17708, decode.loss_focal: 0.0005, decode.loss_dice: 0.1421, decode.acc_seg: 99.8239, loss: 0.1426
2023-11-21 22:27:39,077 - mmseg - INFO - Iter [4400/5000]	lr: 2.337e-05, eta: 0:07:29, time: 0.742, data_time: 0.136, memory: 17708, decode.loss_focal: 0.0005, decode.loss_dice: 0.1475, decode.acc_seg: 99.7992, loss: 0.1480
2023-11-21 22:28:13,017 - mmseg - INFO - Iter [4450/5000]	lr: 2.237e-05, eta: 0:06:51, time: 0.679, data_time: 0.070, memory: 17708, decode.loss_focal: 0.0005, decode.loss_dice: 0.1458, decode.acc_seg: 99.8069, loss: 0.1463
2023-11-21 22:28:50,129 - mmseg - INFO - Iter [4500/5000]	lr: 2.135e-05, eta: 0:06:14, time: 0.742, data_time: 0.136, memory: 17708, decode.loss_focal: 0.0005, decode.loss_dice: 0.1425, decode.acc_seg: 99.8173, loss: 0.1430
2023-11-21 22:29:08,211 - mmseg - INFO - per class results:
2023-11-21 22:29:08,212 - mmseg - INFO - 
+------------+-------+-------+-------+-------+-------+--------+-----------+--------+-------+
|   Class    |  IoU  |  VOE  |  ASD  |  MSSD |  Acc  | Fscore | Precision | Recall |  Dice |
+------------+-------+-------+-------+-------+-------+--------+-----------+--------+-------+
| background | 99.95 | 70.42 | 71.86 | 70.39 | 99.93 | 99.96  |   99.96   | 99.95  | 99.94 |
|  scratch   | 85.14 | 85.23 | 72.95 |  75.8 | 75.57 | 85.12  |   86.68   | 83.72  | 77.69 |
|   stain    | 93.31 | 77.06 | 72.24 | 72.28 | 91.64 | 94.34  |   94.26   | 94.43  | 91.51 |
| edgeDamage | 90.35 | 80.02 | 72.65 | 74.33 | 92.96 | 91.35  |   88.11   | 95.31  | 87.03 |
+------------+-------+-------+-------+-------+-------+--------+-----------+--------+-------+
2023-11-21 22:29:08,212 - mmseg - INFO - Summary:
2023-11-21 22:29:08,212 - mmseg - INFO - 
+-------+-------+-------+-------+-------+-------+---------+------------+---------+-------+
|  aAcc |  mIoU |  mVOE |  mASD | mMSSD |  mAcc | mFscore | mPrecision | mRecall | mDice |
+-------+-------+-------+-------+-------+-------+---------+------------+---------+-------+
| 99.95 | 92.18 | 78.19 | 72.43 |  73.2 | 90.03 |  92.69  |   92.25    |  93.35  | 89.04 |
+-------+-------+-------+-------+-------+-------+---------+------------+---------+-------+
2023-11-21 22:29:08,227 - mmseg - INFO - Iter(val) [83]	aAcc: 0.9995, mIoU: 0.9218, mVOE: 0.7819, mASD: 0.7243, mMSSD: 0.7320, mAcc: 0.9003, mFscore: 0.9269, mPrecision: 0.9225, mRecall: 0.9335, mDice: 0.8904, IoU.background: 0.9995, IoU.scratch: 0.8514, IoU.stain: 0.9331, IoU.edgeDamage: 0.9035, VOE.background: 0.7042, VOE.scratch: 0.8523, VOE.stain: 0.7706, VOE.edgeDamage: 0.8002, ASD.background: 0.7186, ASD.scratch: 0.7295, ASD.stain: 0.7224, ASD.edgeDamage: 0.7265, MSSD.background: 0.7039, MSSD.scratch: 0.7580, MSSD.stain: 0.7228, MSSD.edgeDamage: 0.7433, Acc.background: 0.9993, Acc.scratch: 0.7557, Acc.stain: 0.9164, Acc.edgeDamage: 0.9296, Fscore.background: 0.9996, Fscore.scratch: 0.8512, Fscore.stain: 0.9434, Fscore.edgeDamage: 0.9135, Precision.background: 0.9996, Precision.scratch: 0.8668, Precision.stain: 0.9426, Precision.edgeDamage: 0.8811, Recall.background: 0.9995, Recall.scratch: 0.8372, Recall.stain: 0.9443, Recall.edgeDamage: 0.9531, Dice.background: 0.9994, Dice.scratch: 0.7769, Dice.stain: 0.9151, Dice.edgeDamage: 0.8703
2023-11-21 22:29:42,062 - mmseg - INFO - Iter [4550/5000]	lr: 2.033e-05, eta: 0:05:38, time: 1.039, data_time: 0.432, memory: 17708, decode.loss_focal: 0.0004, decode.loss_dice: 0.1429, decode.acc_seg: 99.8299, loss: 0.1434
2023-11-21 22:30:19,054 - mmseg - INFO - Iter [4600/5000]	lr: 1.929e-05, eta: 0:05:00, time: 0.740, data_time: 0.134, memory: 17708, decode.loss_focal: 0.0005, decode.loss_dice: 0.1425, decode.acc_seg: 99.8262, loss: 0.1430
2023-11-21 22:30:53,100 - mmseg - INFO - Iter [4650/5000]	lr: 1.824e-05, eta: 0:04:22, time: 0.681, data_time: 0.072, memory: 17708, decode.loss_focal: 0.0005, decode.loss_dice: 0.1407, decode.acc_seg: 99.8246, loss: 0.1412
2023-11-21 22:31:30,082 - mmseg - INFO - Iter [4700/5000]	lr: 1.718e-05, eta: 0:03:45, time: 0.740, data_time: 0.134, memory: 17708, decode.loss_focal: 0.0005, decode.loss_dice: 0.1424, decode.acc_seg: 99.8215, loss: 0.1428
2023-11-21 22:32:04,053 - mmseg - INFO - Iter [4750/5000]	lr: 1.609e-05, eta: 0:03:07, time: 0.679, data_time: 0.071, memory: 17708, decode.loss_focal: 0.0004, decode.loss_dice: 0.1422, decode.acc_seg: 99.8272, loss: 0.1427
2023-11-21 22:32:41,113 - mmseg - INFO - Iter [4800/5000]	lr: 1.499e-05, eta: 0:02:29, time: 0.741, data_time: 0.136, memory: 17708, decode.loss_focal: 0.0005, decode.loss_dice: 0.1399, decode.acc_seg: 99.8262, loss: 0.1403
2023-11-21 22:33:15,074 - mmseg - INFO - Iter [4850/5000]	lr: 1.386e-05, eta: 0:01:52, time: 0.679, data_time: 0.070, memory: 17708, decode.loss_focal: 0.0005, decode.loss_dice: 0.1398, decode.acc_seg: 99.8281, loss: 0.1402
2023-11-21 22:33:52,095 - mmseg - INFO - Iter [4900/5000]	lr: 1.269e-05, eta: 0:01:14, time: 0.740, data_time: 0.133, memory: 17708, decode.loss_focal: 0.0005, decode.loss_dice: 0.1418, decode.acc_seg: 99.8243, loss: 0.1422
2023-11-21 22:34:26,008 - mmseg - INFO - Iter [4950/5000]	lr: 1.145e-05, eta: 0:00:37, time: 0.678, data_time: 0.070, memory: 17708, decode.loss_focal: 0.0004, decode.loss_dice: 0.1400, decode.acc_seg: 99.8283, loss: 0.1405
2023-11-21 22:35:02,969 - mmseg - INFO - Saving checkpoint at 5000 iterations
2023-11-21 22:35:03,770 - mmseg - INFO - Exp name: unet_all.py
2023-11-21 22:35:03,770 - mmseg - INFO - Iter [5000/5000]	lr: 1.004e-05, eta: 0:00:00, time: 0.757, data_time: 0.132, memory: 17708, decode.loss_focal: 0.0005, decode.loss_dice: 0.1402, decode.acc_seg: 99.8253, loss: 0.1406
2023-11-21 22:35:21,374 - mmseg - INFO - per class results:
2023-11-21 22:35:21,375 - mmseg - INFO - 
+------------+-------+-------+-------+-------+-------+--------+-----------+--------+-------+
|   Class    |  IoU  |  VOE  |  ASD  |  MSSD |  Acc  | Fscore | Precision | Recall |  Dice |
+------------+-------+-------+-------+-------+-------+--------+-----------+--------+-------+
| background | 99.94 | 70.43 | 71.86 | 70.39 | 99.93 | 99.96  |   99.96   | 99.95  | 99.94 |
|  scratch   | 85.35 | 85.02 | 72.95 | 75.84 | 75.41 |  85.4  |   87.45   | 83.61  |  78.1 |
|   stain    | 93.08 | 77.29 | 72.28 | 72.45 | 90.63 | 94.12  |    94.5   | 93.75  | 91.19 |
| edgeDamage | 89.94 | 80.43 |  72.7 | 74.59 | 93.08 | 90.91  |   87.34   | 95.39  | 86.36 |
+------------+-------+-------+-------+-------+-------+--------+-----------+--------+-------+
2023-11-21 22:35:21,377 - mmseg - INFO - Summary:
2023-11-21 22:35:21,378 - mmseg - INFO - 
+-------+-------+-------+-------+-------+-------+---------+------------+---------+-------+
|  aAcc |  mIoU |  mVOE |  mASD | mMSSD |  mAcc | mFscore | mPrecision | mRecall | mDice |
+-------+-------+-------+-------+-------+-------+---------+------------+---------+-------+
| 99.94 | 92.08 | 78.29 | 72.45 | 73.32 | 89.76 |   92.6  |   92.31    |  93.18  |  88.9 |
+-------+-------+-------+-------+-------+-------+---------+------------+---------+-------+
2023-11-21 22:35:21,400 - mmseg - INFO - Exp name: unet_all.py
2023-11-21 22:35:21,400 - mmseg - INFO - Iter(val) [83]	aAcc: 0.9994, mIoU: 0.9208, mVOE: 0.7829, mASD: 0.7245, mMSSD: 0.7332, mAcc: 0.8976, mFscore: 0.9260, mPrecision: 0.9231, mRecall: 0.9318, mDice: 0.8890, IoU.background: 0.9994, IoU.scratch: 0.8535, IoU.stain: 0.9308, IoU.edgeDamage: 0.8994, VOE.background: 0.7043, VOE.scratch: 0.8502, VOE.stain: 0.7729, VOE.edgeDamage: 0.8043, ASD.background: 0.7186, ASD.scratch: 0.7295, ASD.stain: 0.7228, ASD.edgeDamage: 0.7270, MSSD.background: 0.7039, MSSD.scratch: 0.7584, MSSD.stain: 0.7245, MSSD.edgeDamage: 0.7459, Acc.background: 0.9993, Acc.scratch: 0.7541, Acc.stain: 0.9063, Acc.edgeDamage: 0.9308, Fscore.background: 0.9996, Fscore.scratch: 0.8540, Fscore.stain: 0.9412, Fscore.edgeDamage: 0.9091, Precision.background: 0.9996, Precision.scratch: 0.8745, Precision.stain: 0.9450, Precision.edgeDamage: 0.8734, Recall.background: 0.9995, Recall.scratch: 0.8361, Recall.stain: 0.9375, Recall.edgeDamage: 0.9539, Dice.background: 0.9994, Dice.scratch: 0.7810, Dice.stain: 0.9119, Dice.edgeDamage: 0.8636
