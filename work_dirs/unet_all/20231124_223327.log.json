{"env_info": "sys.platform: linux\nPython: 3.8.18 (default, Sep 11 2023, 13:40:15) [GCC 11.2.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3090\nCUDA_HOME: /environment/miniconda3\nNVCC: Cuda compilation tools, release 11.8, V11.8.89\nGCC: gcc (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0\nPyTorch: 1.11.0+cu113\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.3\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.2\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.12.0+cu113\nOpenCV: 4.8.1\nMMCV: 1.7.0\nMMCV Compiler: GCC 9.3\nMMCV CUDA Compiler: 11.3\nMMSegmentation: 0.29.1+", "seed": 1411150861, "exp_name": "unet_all.py", "mmseg_version": "0.29.1+", "config": "norm_cfg = dict(type='BN', requires_grad=True)\nbackbone_norm_cfg = dict(type='LN', requires_grad=True)\nmodel = dict(\n    type='EncoderDecoder',\n    pretrained=None,\n    backbone=dict(\n        type='UnetBackbone',\n        in_channels=3,\n        context_layer='',\n        conv_down=True,\n        channel_list=[64, 128, 256, 512]),\n    decode_head=dict(\n        type='UnetHead',\n        num_classes=4,\n        channels=64,\n        threshold=0.2,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        loss_decode=[\n            dict(\n                type='FocalLoss',\n                use_sigmoid=True,\n                gamma=2.0,\n                alpha=0.25,\n                class_weight=[0.1, 0.5, 0.2, 0.2],\n                loss_weight=2.0),\n            dict(\n                type='DiceLoss',\n                loss_name='loss_dice',\n                class_weight=[0.1, 0.5, 0.2, 0.2],\n                loss_weight=2.0)\n        ]))\ntrain_cfg = dict()\ntest_cfg = dict(mode='whole')\ndataset_type = 'MyDataset'\ncrop_size = (512, 512)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations'),\n    dict(type='Resize', img_scale=(600, 600)),\n    dict(type='RandomCrop', crop_size=(512, 512), cat_max_ratio=0.75),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(type='Normalize', mean=[0, 0, 0], std=[1, 1, 1], to_rgb=True),\n    dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(512, 512),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=False),\n            dict(type='Normalize', mean=[0, 0, 0], std=[1, 1, 1], to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata_root = './datasets/'\ndata = dict(\n    samples_per_gpu=5,\n    workers_per_gpu=2,\n    train=dict(\n        type='MyDataset',\n        data_root='./datasets/',\n        img_dir='train/images',\n        ann_dir='train/labels',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations'),\n            dict(type='Resize', img_scale=(600, 600)),\n            dict(type='RandomCrop', crop_size=(512, 512), cat_max_ratio=0.75),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(type='PhotoMetricDistortion'),\n            dict(type='Normalize', mean=[0, 0, 0], std=[1, 1, 1], to_rgb=True),\n            dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n        ]),\n    val=dict(\n        type='MyDataset',\n        data_root='./datasets/',\n        img_dir='test/images',\n        ann_dir='test/labels',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(512, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=False),\n                    dict(\n                        type='Normalize',\n                        mean=[0, 0, 0],\n                        std=[1, 1, 1],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='MyDataset',\n        data_root='./datasets/',\n        img_dir='test/images',\n        ann_dir='test/labels',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(512, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=False),\n                    dict(\n                        type='Normalize',\n                        mean=[0, 0, 0],\n                        std=[1, 1, 1],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    interval=50,\n    hooks=[\n        dict(type='TensorboardLoggerHook'),\n        dict(type='TextLoggerHook', by_epoch=False)\n    ])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = False\noptimizer = dict(type='Adam', lr=0.0001, betas=(0.9, 0.999))\noptimizer_config = dict()\nlr_config = dict(policy='poly', power=0.9, min_lr=1e-05, by_epoch=False)\nrunner = dict(type='IterBasedRunner', max_iters=10000)\ncheckpoint_config = dict(by_epoch=False, save_optimizer=False, interval=5000)\nevaluation = dict(interval=500, metric=['mIoU', 'mFscore', 'mDice'])\nwork_dir = './work_dirs/unet_all'\ngpu_ids = [0]\nauto_resume = False\ndevice = 'cuda'\nseed = 1411150861\n", "CLASSES": ["background", "scratch", "stain", "edgeDamage"], "PALETTE": [[0, 0, 0], [1, 1, 1], [2, 2, 2], [3, 3, 3]]}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.0001, "memory": 13650, "data_time": 0.01678, "decode.loss_focal": 0.05156, "decode.loss_dice": 0.46748, "decode.acc_seg": 97.29725, "loss": 0.51904, "time": 0.44562}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.0001, "memory": 13650, "data_time": 0.05565, "decode.loss_focal": 0.03878, "decode.loss_dice": 0.46088, "decode.acc_seg": 99.53694, "loss": 0.49966, "time": 0.484}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 0.0001, "memory": 13650, "data_time": 0.00396, "decode.loss_focal": 0.02867, "decode.loss_dice": 0.45519, "decode.acc_seg": 99.61153, "loss": 0.48386, "time": 0.432}
{"mode": "train", "epoch": 3, "iter": 200, "lr": 0.0001, "memory": 13650, "data_time": 0.05481, "decode.loss_focal": 0.02136, "decode.loss_dice": 0.45036, "decode.acc_seg": 99.62309, "loss": 0.47173, "time": 0.48671}
{"mode": "train", "epoch": 3, "iter": 250, "lr": 0.0001, "memory": 13650, "data_time": 0.00427, "decode.loss_focal": 0.01632, "decode.loss_dice": 0.44606, "decode.acc_seg": 99.62419, "loss": 0.46238, "time": 0.43836}
{"mode": "train", "epoch": 4, "iter": 300, "lr": 0.0001, "memory": 13650, "data_time": 0.05556, "decode.loss_focal": 0.01316, "decode.loss_dice": 0.44277, "decode.acc_seg": 99.60281, "loss": 0.45593, "time": 0.48707}
{"mode": "train", "epoch": 4, "iter": 350, "lr": 0.0001, "memory": 13650, "data_time": 0.00433, "decode.loss_focal": 0.01067, "decode.loss_dice": 0.43856, "decode.acc_seg": 99.62307, "loss": 0.44923, "time": 0.43801}
{"mode": "train", "epoch": 5, "iter": 400, "lr": 0.0001, "memory": 13650, "data_time": 0.05629, "decode.loss_focal": 0.00885, "decode.loss_dice": 0.43452, "decode.acc_seg": 99.61064, "loss": 0.44336, "time": 0.48853}
{"mode": "train", "epoch": 5, "iter": 450, "lr": 0.0001, "memory": 13650, "data_time": 0.00437, "decode.loss_focal": 0.00748, "decode.loss_dice": 0.42794, "decode.acc_seg": 99.61067, "loss": 0.43541, "time": 0.43694}
{"mode": "train", "epoch": 6, "iter": 500, "lr": 0.0001, "memory": 13650, "data_time": 0.0563, "decode.loss_focal": 0.00609, "decode.loss_dice": 0.42233, "decode.acc_seg": 99.51155, "loss": 0.42842, "time": 0.48983}
{"mode": "val", "epoch": 6, "iter": 105, "lr": 0.0001, "aAcc": 0.9985, "mIoU": 0.7838, "mVOE": 0.9199, "mASD": 0.7443, "mMSSD": 0.7666, "mAcc": 0.5274, "mFscore": 0.8127, "mPrecision": 0.8112, "mRecall": 0.6849, "mDice": 0.5262, "IoU.background": 0.9985, "IoU.scratch": 0.7294, "IoU.stain": 0.7037, "IoU.edgeDamage": 0.7037, "VOE.background": 0.7052, "VOE.scratch": 0.9743, "VOE.stain": 1.0, "VOE.edgeDamage": 1.0, "ASD.background": 0.7318, "ASD.scratch": 0.7568, "ASD.stain": NaN, "ASD.edgeDamage": NaN, "MSSD.background": 0.7042, "MSSD.scratch": 0.829, "MSSD.stain": NaN, "MSSD.edgeDamage": NaN, "Acc.background": 0.9989, "Acc.scratch": 0.4441, "Acc.stain": 0.3333, "Acc.edgeDamage": 0.3333, "Fscore.background": 0.9989, "Fscore.scratch": 0.6266, "Fscore.stain": NaN, "Fscore.edgeDamage": NaN, "Precision.background": 0.9985, "Precision.scratch": 0.624, "Precision.stain": NaN, "Precision.edgeDamage": NaN, "Recall.background": 0.9993, "Recall.scratch": 0.6294, "Recall.stain": 0.5556, "Recall.edgeDamage": 0.5556, "Dice.background": 0.9983, "Dice.scratch": 0.4399, "Dice.stain": 0.3333, "Dice.edgeDamage": 0.3333}
{"mode": "train", "epoch": 6, "iter": 550, "lr": 0.0001, "memory": 13650, "data_time": 0.46736, "decode.loss_focal": 0.00494, "decode.loss_dice": 0.41199, "decode.acc_seg": 99.18005, "loss": 0.41693, "time": 0.89678}
{"mode": "train", "epoch": 7, "iter": 600, "lr": 0.0001, "memory": 13650, "data_time": 0.05742, "decode.loss_focal": 0.004, "decode.loss_dice": 0.39679, "decode.acc_seg": 99.45643, "loss": 0.40079, "time": 0.48866}
{"mode": "train", "epoch": 7, "iter": 650, "lr": 9e-05, "memory": 13650, "data_time": 0.00391, "decode.loss_focal": 0.0033, "decode.loss_dice": 0.38604, "decode.acc_seg": 99.4349, "loss": 0.38934, "time": 0.43502}
{"mode": "train", "epoch": 8, "iter": 700, "lr": 9e-05, "memory": 13650, "data_time": 0.05577, "decode.loss_focal": 0.00283, "decode.loss_dice": 0.37728, "decode.acc_seg": 99.48083, "loss": 0.38011, "time": 0.48721}
{"mode": "train", "epoch": 8, "iter": 750, "lr": 9e-05, "memory": 13650, "data_time": 0.00369, "decode.loss_focal": 0.00249, "decode.loss_dice": 0.36985, "decode.acc_seg": 99.51963, "loss": 0.37234, "time": 0.43558}
{"mode": "train", "epoch": 9, "iter": 800, "lr": 9e-05, "memory": 13650, "data_time": 0.05603, "decode.loss_focal": 0.00223, "decode.loss_dice": 0.35971, "decode.acc_seg": 99.53564, "loss": 0.36195, "time": 0.48743}
{"mode": "train", "epoch": 10, "iter": 850, "lr": 9e-05, "memory": 13650, "data_time": 0.05615, "decode.loss_focal": 0.00199, "decode.loss_dice": 0.36046, "decode.acc_seg": 99.56832, "loss": 0.36245, "time": 0.48859}
{"mode": "train", "epoch": 10, "iter": 900, "lr": 9e-05, "memory": 13650, "data_time": 0.00416, "decode.loss_focal": 0.00188, "decode.loss_dice": 0.34466, "decode.acc_seg": 99.54788, "loss": 0.34654, "time": 0.43603}
{"mode": "train", "epoch": 11, "iter": 950, "lr": 9e-05, "memory": 13650, "data_time": 0.0565, "decode.loss_focal": 0.00167, "decode.loss_dice": 0.3495, "decode.acc_seg": 99.61069, "loss": 0.35117, "time": 0.49162}
{"mode": "train", "epoch": 11, "iter": 1000, "lr": 9e-05, "memory": 13650, "data_time": 0.00429, "decode.loss_focal": 0.0016, "decode.loss_dice": 0.3315, "decode.acc_seg": 99.56968, "loss": 0.33309, "time": 0.43794}
{"mode": "val", "epoch": 11, "iter": 105, "lr": 9e-05, "aAcc": 0.999, "mIoU": 0.8322, "mVOE": 0.8715, "mASD": 0.7424, "mMSSD": 0.7569, "mAcc": 0.6541, "mFscore": 0.8582, "mPrecision": 0.8984, "mRecall": 0.7694, "mDice": 0.6738, "IoU.background": 0.999, "IoU.scratch": 0.7698, "IoU.stain": 0.8564, "IoU.edgeDamage": 0.7037, "VOE.background": 0.7047, "VOE.scratch": 0.9339, "VOE.stain": 0.8473, "VOE.edgeDamage": 1.0, "ASD.background": 0.7318, "ASD.scratch": 0.7537, "ASD.stain": 0.7416, "ASD.edgeDamage": NaN, "MSSD.background": 0.7041, "MSSD.scratch": 0.8137, "MSSD.stain": 0.753, "MSSD.edgeDamage": NaN, "Acc.background": 0.9997, "Acc.scratch": 0.5051, "Acc.stain": 0.7782, "Acc.edgeDamage": 0.3333, "Fscore.background": 0.9992, "Fscore.scratch": 0.7176, "Fscore.stain": 0.8578, "Fscore.edgeDamage": NaN, "Precision.background": 0.9987, "Precision.scratch": 0.8326, "Precision.stain": 0.8637, "Precision.edgeDamage": NaN, "Recall.background": 0.9998, "Recall.scratch": 0.6701, "Recall.stain": 0.8521, "Recall.edgeDamage": 0.5556, "Dice.background": 0.9989, "Dice.scratch": 0.5764, "Dice.stain": 0.7867, "Dice.edgeDamage": 0.3333}
{"mode": "train", "epoch": 12, "iter": 1050, "lr": 9e-05, "memory": 13650, "data_time": 0.52838, "decode.loss_focal": 0.0015, "decode.loss_dice": 0.3325, "decode.acc_seg": 99.57804, "loss": 0.33401, "time": 0.95836}
{"mode": "train", "epoch": 12, "iter": 1100, "lr": 9e-05, "memory": 13650, "data_time": 0.00425, "decode.loss_focal": 0.00145, "decode.loss_dice": 0.32825, "decode.acc_seg": 99.56449, "loss": 0.3297, "time": 0.43558}
{"mode": "train", "epoch": 13, "iter": 1150, "lr": 9e-05, "memory": 13650, "data_time": 0.05539, "decode.loss_focal": 0.00135, "decode.loss_dice": 0.31677, "decode.acc_seg": 99.59802, "loss": 0.31813, "time": 0.48734}
{"mode": "train", "epoch": 13, "iter": 1200, "lr": 9e-05, "memory": 13650, "data_time": 0.0042, "decode.loss_focal": 0.00122, "decode.loss_dice": 0.31921, "decode.acc_seg": 99.63206, "loss": 0.32042, "time": 0.43665}
{"mode": "train", "epoch": 14, "iter": 1250, "lr": 9e-05, "memory": 13650, "data_time": 0.05704, "decode.loss_focal": 0.00125, "decode.loss_dice": 0.30969, "decode.acc_seg": 99.62192, "loss": 0.31093, "time": 0.48837}
{"mode": "train", "epoch": 14, "iter": 1300, "lr": 9e-05, "memory": 13650, "data_time": 0.00435, "decode.loss_focal": 0.00119, "decode.loss_dice": 0.31385, "decode.acc_seg": 99.62547, "loss": 0.31504, "time": 0.43838}
{"mode": "train", "epoch": 15, "iter": 1350, "lr": 9e-05, "memory": 13650, "data_time": 0.05642, "decode.loss_focal": 0.00111, "decode.loss_dice": 0.3013, "decode.acc_seg": 99.65927, "loss": 0.3024, "time": 0.48903}
{"mode": "train", "epoch": 15, "iter": 1400, "lr": 9e-05, "memory": 13650, "data_time": 0.00441, "decode.loss_focal": 0.00114, "decode.loss_dice": 0.29535, "decode.acc_seg": 99.63886, "loss": 0.29649, "time": 0.43614}
{"mode": "train", "epoch": 16, "iter": 1450, "lr": 9e-05, "memory": 13650, "data_time": 0.05652, "decode.loss_focal": 0.00108, "decode.loss_dice": 0.28928, "decode.acc_seg": 99.67181, "loss": 0.29035, "time": 0.48817}
{"mode": "train", "epoch": 16, "iter": 1500, "lr": 9e-05, "memory": 13650, "data_time": 0.00414, "decode.loss_focal": 0.00117, "decode.loss_dice": 0.29265, "decode.acc_seg": 99.62533, "loss": 0.29382, "time": 0.43809}
{"mode": "val", "epoch": 16, "iter": 105, "lr": 9e-05, "aAcc": 0.999, "mIoU": 0.8362, "mVOE": 0.8675, "mASD": 0.7418, "mMSSD": 0.7543, "mAcc": 0.6631, "mFscore": 0.8662, "mPrecision": 0.9077, "mRecall": 0.7754, "mDice": 0.6828, "IoU.background": 0.999, "IoU.scratch": 0.7745, "IoU.stain": 0.8678, "IoU.edgeDamage": 0.7037, "VOE.background": 0.7047, "VOE.scratch": 0.9292, "VOE.stain": 0.8359, "VOE.edgeDamage": 1.0, "ASD.background": 0.7318, "ASD.scratch": 0.7533, "ASD.stain": 0.7404, "ASD.edgeDamage": NaN, "MSSD.background": 0.7041, "MSSD.scratch": 0.8115, "MSSD.stain": 0.7472, "MSSD.edgeDamage": NaN, "Acc.background": 0.9997, "Acc.scratch": 0.5148, "Acc.stain": 0.8044, "Acc.edgeDamage": 0.3333, "Fscore.background": 0.9993, "Fscore.scratch": 0.7269, "Fscore.stain": 0.8724, "Fscore.edgeDamage": NaN, "Precision.background": 0.9987, "Precision.scratch": 0.8491, "Precision.stain": 0.8752, "Precision.edgeDamage": NaN, "Recall.background": 0.9998, "Recall.scratch": 0.6765, "Recall.stain": 0.8696, "Recall.edgeDamage": 0.5556, "Dice.background": 0.9989, "Dice.scratch": 0.5904, "Dice.stain": 0.8086, "Dice.edgeDamage": 0.3333}
{"mode": "train", "epoch": 17, "iter": 1550, "lr": 9e-05, "memory": 13650, "data_time": 0.53231, "decode.loss_focal": 0.00114, "decode.loss_dice": 0.28819, "decode.acc_seg": 99.64841, "loss": 0.28932, "time": 0.96429}
{"mode": "train", "epoch": 18, "iter": 1600, "lr": 9e-05, "memory": 13650, "data_time": 0.05638, "decode.loss_focal": 0.00109, "decode.loss_dice": 0.28165, "decode.acc_seg": 99.66078, "loss": 0.28274, "time": 0.48852}
{"mode": "train", "epoch": 18, "iter": 1650, "lr": 9e-05, "memory": 13650, "data_time": 0.00415, "decode.loss_focal": 0.00118, "decode.loss_dice": 0.2804, "decode.acc_seg": 99.62652, "loss": 0.28158, "time": 0.43574}
{"mode": "train", "epoch": 19, "iter": 1700, "lr": 9e-05, "memory": 13650, "data_time": 0.05646, "decode.loss_focal": 0.00108, "decode.loss_dice": 0.27376, "decode.acc_seg": 99.67614, "loss": 0.27485, "time": 0.48787}
{"mode": "train", "epoch": 19, "iter": 1750, "lr": 9e-05, "memory": 13650, "data_time": 0.00427, "decode.loss_focal": 0.00118, "decode.loss_dice": 0.28491, "decode.acc_seg": 99.65132, "loss": 0.2861, "time": 0.43594}
{"mode": "train", "epoch": 20, "iter": 1800, "lr": 9e-05, "memory": 13650, "data_time": 0.0561, "decode.loss_focal": 0.0011, "decode.loss_dice": 0.27267, "decode.acc_seg": 99.65731, "loss": 0.27376, "time": 0.48764}
{"mode": "train", "epoch": 20, "iter": 1850, "lr": 8e-05, "memory": 13650, "data_time": 0.00447, "decode.loss_focal": 0.0011, "decode.loss_dice": 0.26525, "decode.acc_seg": 99.66662, "loss": 0.26635, "time": 0.43613}
{"mode": "train", "epoch": 21, "iter": 1900, "lr": 8e-05, "memory": 13650, "data_time": 0.05754, "decode.loss_focal": 0.00112, "decode.loss_dice": 0.28043, "decode.acc_seg": 99.66736, "loss": 0.28155, "time": 0.49003}
{"mode": "train", "epoch": 21, "iter": 1950, "lr": 8e-05, "memory": 13650, "data_time": 0.00436, "decode.loss_focal": 0.00115, "decode.loss_dice": 0.27376, "decode.acc_seg": 99.64659, "loss": 0.27491, "time": 0.4377}
{"mode": "train", "epoch": 22, "iter": 2000, "lr": 8e-05, "memory": 13650, "data_time": 0.05755, "decode.loss_focal": 0.0011, "decode.loss_dice": 0.26563, "decode.acc_seg": 99.674, "loss": 0.26673, "time": 0.49284}
{"mode": "val", "epoch": 22, "iter": 105, "lr": 8e-05, "aAcc": 0.9991, "mIoU": 0.8451, "mVOE": 0.8586, "mASD": 0.7411, "mMSSD": 0.7507, "mAcc": 0.6752, "mFscore": 0.8852, "mPrecision": 0.9242, "mRecall": 0.7835, "mDice": 0.7042, "IoU.background": 0.9991, "IoU.scratch": 0.797, "IoU.stain": 0.8807, "IoU.edgeDamage": 0.7037, "VOE.background": 0.7046, "VOE.scratch": 0.9067, "VOE.stain": 0.823, "VOE.edgeDamage": 1.0, "ASD.background": 0.7318, "ASD.scratch": 0.7501, "ASD.stain": 0.7414, "ASD.edgeDamage": NaN, "MSSD.background": 0.7041, "MSSD.scratch": 0.7956, "MSSD.stain": 0.7523, "MSSD.edgeDamage": NaN, "Acc.background": 0.9997, "Acc.scratch": 0.5864, "Acc.stain": 0.7815, "Acc.edgeDamage": 0.3333, "Fscore.background": 0.9993, "Fscore.scratch": 0.7684, "Fscore.stain": 0.8879, "Fscore.edgeDamage": NaN, "Precision.background": 0.9988, "Precision.scratch": 0.8436, "Precision.stain": 0.9301, "Precision.edgeDamage": NaN, "Recall.background": 0.9998, "Recall.scratch": 0.7243, "Recall.stain": 0.8543, "Recall.edgeDamage": 0.5556, "Dice.background": 0.9989, "Dice.scratch": 0.6525, "Dice.stain": 0.8319, "Dice.edgeDamage": 0.3333}
