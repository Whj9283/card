{"env_info": "sys.platform: linux\nPython: 3.8.18 (default, Sep 11 2023, 13:40:15) [GCC 11.2.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3090\nCUDA_HOME: /environment/miniconda3\nNVCC: Cuda compilation tools, release 11.8, V11.8.89\nGCC: gcc (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0\nPyTorch: 1.11.0+cu113\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.3\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.2\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.12.0+cu113\nOpenCV: 4.8.1\nMMCV: 1.7.0\nMMCV Compiler: GCC 9.3\nMMCV CUDA Compiler: 11.3\nMMSegmentation: 0.29.1+", "seed": 2024119386, "exp_name": "unet_all.py", "mmseg_version": "0.29.1+", "config": "norm_cfg = dict(type='BN', requires_grad=True)\nbackbone_norm_cfg = dict(type='LN', requires_grad=True)\nmodel = dict(\n    type='EncoderDecoder',\n    pretrained=None,\n    backbone=dict(\n        type='UnetBackbone',\n        in_channels=3,\n        context_layer='seLayer',\n        conv_down=True,\n        channel_list=[64, 128, 256, 512]),\n    decode_head=dict(\n        type='UnetHead',\n        num_classes=4,\n        channels=64,\n        threshold=0.2,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        loss_decode=[\n            dict(\n                type='FocalLoss',\n                use_sigmoid=True,\n                gamma=2.0,\n                alpha=0.25,\n                class_weight=[0.1, 0.5, 0.2, 0.2],\n                loss_weight=2.0),\n            dict(\n                type='DiceLoss',\n                loss_name='loss_dice',\n                class_weight=[0.1, 0.5, 0.2, 0.2],\n                loss_weight=2.0)\n        ]))\ntrain_cfg = dict()\ntest_cfg = dict(mode='whole')\ndataset_type = 'MyDataset'\ncrop_size = (512, 512)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations'),\n    dict(type='Resize', img_scale=(600, 600)),\n    dict(type='RandomCrop', crop_size=(512, 512), cat_max_ratio=0.75),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(type='Normalize', mean=[0, 0, 0], std=[1, 1, 1], to_rgb=True),\n    dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(512, 512),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=False),\n            dict(type='Normalize', mean=[0, 0, 0], std=[1, 1, 1], to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata_root = './datasets/'\ndata = dict(\n    samples_per_gpu=5,\n    workers_per_gpu=2,\n    train=dict(\n        type='MyDataset',\n        data_root='./datasets/',\n        img_dir='train/images',\n        ann_dir='train/labels',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations'),\n            dict(type='Resize', img_scale=(600, 600)),\n            dict(type='RandomCrop', crop_size=(512, 512), cat_max_ratio=0.75),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(type='PhotoMetricDistortion'),\n            dict(type='Normalize', mean=[0, 0, 0], std=[1, 1, 1], to_rgb=True),\n            dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n        ]),\n    val=dict(\n        type='MyDataset',\n        data_root='./datasets/',\n        img_dir='test/images',\n        ann_dir='test/labels',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(512, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=False),\n                    dict(\n                        type='Normalize',\n                        mean=[0, 0, 0],\n                        std=[1, 1, 1],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='MyDataset',\n        data_root='./datasets/',\n        img_dir='test/images',\n        ann_dir='test/labels',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(512, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=False),\n                    dict(\n                        type='Normalize',\n                        mean=[0, 0, 0],\n                        std=[1, 1, 1],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    interval=50,\n    hooks=[\n        dict(type='TensorboardLoggerHook'),\n        dict(type='TextLoggerHook', by_epoch=False)\n    ])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = False\noptimizer = dict(type='Adam', lr=0.0001, betas=(0.9, 0.999))\noptimizer_config = dict()\nlr_config = dict(policy='poly', power=0.9, min_lr=1e-05, by_epoch=False)\nrunner = dict(type='IterBasedRunner', max_iters=10000)\ncheckpoint_config = dict(by_epoch=False, save_optimizer=False, interval=5000)\nevaluation = dict(interval=500, metric=['mIoU', 'mFscore', 'mDice'])\nwork_dir = './work_dirs/unet_all'\ngpu_ids = [0]\nauto_resume = False\ndevice = 'cuda'\nseed = 2024119386\n", "CLASSES": ["background", "scratch", "stain", "edgeDamage"], "PALETTE": [[0, 0, 0], [1, 1, 1], [2, 2, 2], [3, 3, 3]]}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.0001, "memory": 17995, "data_time": 0.19597, "decode.loss_focal": 0.03959, "decode.loss_dice": 0.46457, "decode.acc_seg": 89.44313, "loss": 0.50415, "time": 0.92972}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.0001, "memory": 17995, "data_time": 0.05522, "decode.loss_focal": 0.01758, "decode.loss_dice": 0.45017, "decode.acc_seg": 99.61241, "loss": 0.46776, "time": 0.58746}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 0.0001, "memory": 17995, "data_time": 0.00408, "decode.loss_focal": 0.00898, "decode.loss_dice": 0.43787, "decode.acc_seg": 99.61778, "loss": 0.44684, "time": 0.5381}
{"mode": "train", "epoch": 3, "iter": 200, "lr": 0.0001, "memory": 17995, "data_time": 0.05672, "decode.loss_focal": 0.0052, "decode.loss_dice": 0.41805, "decode.acc_seg": 99.29904, "loss": 0.42325, "time": 0.59318}
{"mode": "train", "epoch": 3, "iter": 250, "lr": 0.0001, "memory": 17995, "data_time": 0.00459, "decode.loss_focal": 0.00303, "decode.loss_dice": 0.39582, "decode.acc_seg": 99.47843, "loss": 0.39885, "time": 0.54024}
{"mode": "train", "epoch": 4, "iter": 300, "lr": 0.0001, "memory": 17995, "data_time": 0.05711, "decode.loss_focal": 0.0022, "decode.loss_dice": 0.36504, "decode.acc_seg": 99.43938, "loss": 0.36725, "time": 0.59404}
{"mode": "train", "epoch": 4, "iter": 350, "lr": 0.0001, "memory": 17995, "data_time": 0.00454, "decode.loss_focal": 0.00173, "decode.loss_dice": 0.34756, "decode.acc_seg": 99.52009, "loss": 0.34929, "time": 0.54116}
{"mode": "train", "epoch": 5, "iter": 400, "lr": 0.0001, "memory": 17995, "data_time": 0.05695, "decode.loss_focal": 0.00143, "decode.loss_dice": 0.33446, "decode.acc_seg": 99.56794, "loss": 0.33589, "time": 0.59593}
{"mode": "train", "epoch": 5, "iter": 450, "lr": 0.0001, "memory": 17995, "data_time": 0.00433, "decode.loss_focal": 0.00132, "decode.loss_dice": 0.32101, "decode.acc_seg": 99.56964, "loss": 0.32233, "time": 0.54279}
{"mode": "train", "epoch": 6, "iter": 500, "lr": 0.0001, "memory": 17995, "data_time": 0.05617, "decode.loss_focal": 0.00117, "decode.loss_dice": 0.31024, "decode.acc_seg": 99.62805, "loss": 0.31141, "time": 0.59252}
{"mode": "val", "epoch": 6, "iter": 105, "lr": 0.0001, "aAcc": 0.9985, "mIoU": 0.8186, "mVOE": 0.8851, "mASD": 0.7355, "mMSSD": 0.7712, "mAcc": 0.6334, "mFscore": 0.8302, "mPrecision": 0.8776, "mRecall": 0.7556, "mDice": 0.6423, "IoU.background": 0.9985, "IoU.scratch": 0.7604, "IoU.stain": 0.8118, "IoU.edgeDamage": 0.7037, "VOE.background": 0.7052, "VOE.scratch": 0.9433, "VOE.stain": 0.8919, "VOE.edgeDamage": 1.0, "ASD.background": 0.7221, "ASD.scratch": 0.7439, "ASD.stain": 0.7404, "ASD.edgeDamage": NaN, "MSSD.background": 0.7041, "MSSD.scratch": 0.8136, "MSSD.stain": 0.796, "MSSD.edgeDamage": NaN, "Acc.background": 0.9984, "Acc.scratch": 0.6169, "Acc.stain": 0.5848, "Acc.edgeDamage": 0.3333, "Fscore.background": 0.9989, "Fscore.scratch": 0.6984, "Fscore.stain": 0.7932, "Fscore.edgeDamage": NaN, "Precision.background": 0.9988, "Precision.scratch": 0.6704, "Precision.stain": 0.9637, "Precision.edgeDamage": NaN, "Recall.background": 0.999, "Recall.scratch": 0.7446, "Recall.stain": 0.7232, "Recall.edgeDamage": 0.5556, "Dice.background": 0.9983, "Dice.scratch": 0.5476, "Dice.stain": 0.6898, "Dice.edgeDamage": 0.3333}
{"mode": "train", "epoch": 6, "iter": 550, "lr": 0.0001, "memory": 17995, "data_time": 0.64899, "decode.loss_focal": 0.00117, "decode.loss_dice": 0.29775, "decode.acc_seg": 99.62406, "loss": 0.29891, "time": 1.18376}
{"mode": "train", "epoch": 7, "iter": 600, "lr": 0.0001, "memory": 17995, "data_time": 0.05735, "decode.loss_focal": 0.00113, "decode.loss_dice": 0.28846, "decode.acc_seg": 99.6422, "loss": 0.28959, "time": 0.59287}
{"mode": "train", "epoch": 7, "iter": 650, "lr": 9e-05, "memory": 17995, "data_time": 0.00464, "decode.loss_focal": 0.00108, "decode.loss_dice": 0.28535, "decode.acc_seg": 99.64652, "loss": 0.28643, "time": 0.541}
{"mode": "train", "epoch": 8, "iter": 700, "lr": 9e-05, "memory": 17995, "data_time": 0.05666, "decode.loss_focal": 0.00106, "decode.loss_dice": 0.28378, "decode.acc_seg": 99.63837, "loss": 0.28484, "time": 0.59437}
{"mode": "train", "epoch": 8, "iter": 750, "lr": 9e-05, "memory": 17995, "data_time": 0.00456, "decode.loss_focal": 0.00105, "decode.loss_dice": 0.27519, "decode.acc_seg": 99.64303, "loss": 0.27624, "time": 0.54223}
{"mode": "train", "epoch": 9, "iter": 800, "lr": 9e-05, "memory": 17995, "data_time": 0.05649, "decode.loss_focal": 0.00099, "decode.loss_dice": 0.2698, "decode.acc_seg": 99.66057, "loss": 0.27079, "time": 0.59398}
{"mode": "train", "epoch": 10, "iter": 850, "lr": 9e-05, "memory": 17995, "data_time": 0.05602, "decode.loss_focal": 0.00104, "decode.loss_dice": 0.27484, "decode.acc_seg": 99.65083, "loss": 0.27587, "time": 0.59368}
{"mode": "train", "epoch": 10, "iter": 900, "lr": 9e-05, "memory": 17995, "data_time": 0.0046, "decode.loss_focal": 0.0009, "decode.loss_dice": 0.262, "decode.acc_seg": 99.68687, "loss": 0.2629, "time": 0.54271}
{"mode": "train", "epoch": 11, "iter": 950, "lr": 9e-05, "memory": 17995, "data_time": 0.05784, "decode.loss_focal": 0.001, "decode.loss_dice": 0.26508, "decode.acc_seg": 99.65122, "loss": 0.26608, "time": 0.59658}
{"mode": "train", "epoch": 11, "iter": 1000, "lr": 9e-05, "memory": 17995, "data_time": 0.00452, "decode.loss_focal": 0.00102, "decode.loss_dice": 0.2735, "decode.acc_seg": 99.64179, "loss": 0.27452, "time": 0.54285}
{"mode": "val", "epoch": 11, "iter": 105, "lr": 9e-05, "aAcc": 0.9989, "mIoU": 0.8375, "mVOE": 0.8662, "mASD": 0.732, "mMSSD": 0.7539, "mAcc": 0.6641, "mFscore": 0.8712, "mPrecision": 0.9022, "mRecall": 0.776, "mDice": 0.6885, "IoU.background": 0.9989, "IoU.scratch": 0.7889, "IoU.stain": 0.8584, "IoU.edgeDamage": 0.7037, "VOE.background": 0.7048, "VOE.scratch": 0.9148, "VOE.stain": 0.8453, "VOE.edgeDamage": 1.0, "ASD.background": 0.722, "ASD.scratch": 0.7394, "ASD.stain": 0.7346, "ASD.edgeDamage": NaN, "MSSD.background": 0.7041, "MSSD.scratch": 0.7906, "MSSD.stain": 0.7671, "MSSD.edgeDamage": NaN, "Acc.background": 0.9994, "Acc.scratch": 0.6088, "Acc.stain": 0.7147, "Acc.edgeDamage": 0.3333, "Fscore.background": 0.9992, "Fscore.scratch": 0.754, "Fscore.stain": 0.8605, "Fscore.edgeDamage": NaN, "Precision.background": 0.9988, "Precision.scratch": 0.7714, "Precision.stain": 0.9365, "Precision.edgeDamage": NaN, "Recall.background": 0.9996, "Recall.scratch": 0.7392, "Recall.stain": 0.8098, "Recall.edgeDamage": 0.5556, "Dice.background": 0.9988, "Dice.scratch": 0.631, "Dice.stain": 0.7908, "Dice.edgeDamage": 0.3333}
{"mode": "train", "epoch": 12, "iter": 1050, "lr": 9e-05, "memory": 17995, "data_time": 0.56267, "decode.loss_focal": 0.0009, "decode.loss_dice": 0.25762, "decode.acc_seg": 99.67751, "loss": 0.25852, "time": 1.0983}
{"mode": "train", "epoch": 12, "iter": 1100, "lr": 9e-05, "memory": 17995, "data_time": 0.0047, "decode.loss_focal": 0.00094, "decode.loss_dice": 0.25588, "decode.acc_seg": 99.65112, "loss": 0.25682, "time": 0.54225}
{"mode": "train", "epoch": 13, "iter": 1150, "lr": 9e-05, "memory": 17995, "data_time": 0.05749, "decode.loss_focal": 0.00081, "decode.loss_dice": 0.2518, "decode.acc_seg": 99.70945, "loss": 0.25261, "time": 0.5958}
{"mode": "train", "epoch": 13, "iter": 1200, "lr": 9e-05, "memory": 17995, "data_time": 0.00468, "decode.loss_focal": 0.00093, "decode.loss_dice": 0.25108, "decode.acc_seg": 99.65793, "loss": 0.25201, "time": 0.54299}
{"mode": "train", "epoch": 14, "iter": 1250, "lr": 9e-05, "memory": 17995, "data_time": 0.058, "decode.loss_focal": 0.00089, "decode.loss_dice": 0.2617, "decode.acc_seg": 99.67114, "loss": 0.26259, "time": 0.59719}
{"mode": "train", "epoch": 14, "iter": 1300, "lr": 9e-05, "memory": 17995, "data_time": 0.00451, "decode.loss_focal": 0.00092, "decode.loss_dice": 0.25356, "decode.acc_seg": 99.65913, "loss": 0.25449, "time": 0.54548}
{"mode": "train", "epoch": 15, "iter": 1350, "lr": 9e-05, "memory": 17995, "data_time": 0.05738, "decode.loss_focal": 0.00091, "decode.loss_dice": 0.25543, "decode.acc_seg": 99.6594, "loss": 0.25634, "time": 0.59564}
{"mode": "train", "epoch": 15, "iter": 1400, "lr": 9e-05, "memory": 17995, "data_time": 0.00425, "decode.loss_focal": 0.00078, "decode.loss_dice": 0.24639, "decode.acc_seg": 99.70356, "loss": 0.24717, "time": 0.54284}
{"mode": "train", "epoch": 16, "iter": 1450, "lr": 9e-05, "memory": 17995, "data_time": 0.05583, "decode.loss_focal": 0.00083, "decode.loss_dice": 0.24124, "decode.acc_seg": 99.68707, "loss": 0.24207, "time": 0.59399}
{"mode": "train", "epoch": 16, "iter": 1500, "lr": 9e-05, "memory": 17995, "data_time": 0.0043, "decode.loss_focal": 0.00087, "decode.loss_dice": 0.24859, "decode.acc_seg": 99.67807, "loss": 0.24945, "time": 0.54334}
{"mode": "val", "epoch": 16, "iter": 105, "lr": 9e-05, "aAcc": 0.9991, "mIoU": 0.8521, "mVOE": 0.8516, "mASD": 0.7293, "mMSSD": 0.7401, "mAcc": 0.7106, "mFscore": 0.8983, "mPrecision": 0.9074, "mRecall": 0.8071, "mDice": 0.7189, "IoU.background": 0.9991, "IoU.scratch": 0.8112, "IoU.stain": 0.8943, "IoU.edgeDamage": 0.7037, "VOE.background": 0.7046, "VOE.scratch": 0.8925, "VOE.stain": 0.8094, "VOE.edgeDamage": 1.0, "ASD.background": 0.722, "ASD.scratch": 0.7373, "ASD.stain": 0.7284, "ASD.edgeDamage": NaN, "MSSD.background": 0.7041, "MSSD.scratch": 0.7803, "MSSD.stain": 0.736, "MSSD.edgeDamage": NaN, "Acc.background": 0.9995, "Acc.scratch": 0.6551, "Acc.stain": 0.8545, "Acc.edgeDamage": 0.3333, "Fscore.background": 0.9993, "Fscore.scratch": 0.7921, "Fscore.stain": 0.9035, "Fscore.edgeDamage": NaN, "Precision.background": 0.9989, "Precision.scratch": 0.8192, "Precision.stain": 0.904, "Precision.edgeDamage": NaN, "Recall.background": 0.9997, "Recall.scratch": 0.7701, "Recall.stain": 0.903, "Recall.edgeDamage": 0.5556, "Dice.background": 0.9989, "Dice.scratch": 0.6882, "Dice.stain": 0.8553, "Dice.edgeDamage": 0.3333}
{"mode": "train", "epoch": 17, "iter": 1550, "lr": 9e-05, "memory": 17995, "data_time": 0.55685, "decode.loss_focal": 0.0008, "decode.loss_dice": 0.24321, "decode.acc_seg": 99.69112, "loss": 0.24401, "time": 1.09211}
{"mode": "train", "epoch": 18, "iter": 1600, "lr": 9e-05, "memory": 17995, "data_time": 0.05602, "decode.loss_focal": 0.00085, "decode.loss_dice": 0.24649, "decode.acc_seg": 99.68263, "loss": 0.24735, "time": 0.59255}
{"mode": "train", "epoch": 18, "iter": 1650, "lr": 9e-05, "memory": 17995, "data_time": 0.00469, "decode.loss_focal": 0.00085, "decode.loss_dice": 0.23958, "decode.acc_seg": 99.68178, "loss": 0.24044, "time": 0.54239}
{"mode": "train", "epoch": 19, "iter": 1700, "lr": 9e-05, "memory": 17995, "data_time": 0.05697, "decode.loss_focal": 0.0009, "decode.loss_dice": 0.2657, "decode.acc_seg": 99.66294, "loss": 0.2666, "time": 0.59605}
{"mode": "train", "epoch": 19, "iter": 1750, "lr": 9e-05, "memory": 17995, "data_time": 0.00482, "decode.loss_focal": 0.00086, "decode.loss_dice": 0.24247, "decode.acc_seg": 99.66687, "loss": 0.24333, "time": 0.54422}
{"mode": "train", "epoch": 20, "iter": 1800, "lr": 9e-05, "memory": 17995, "data_time": 0.05742, "decode.loss_focal": 0.00071, "decode.loss_dice": 0.22881, "decode.acc_seg": 99.72975, "loss": 0.22952, "time": 0.59525}
{"mode": "train", "epoch": 20, "iter": 1850, "lr": 8e-05, "memory": 17995, "data_time": 0.00443, "decode.loss_focal": 0.00082, "decode.loss_dice": 0.23453, "decode.acc_seg": 99.67847, "loss": 0.23534, "time": 0.54207}
{"mode": "train", "epoch": 21, "iter": 1900, "lr": 8e-05, "memory": 17995, "data_time": 0.05814, "decode.loss_focal": 0.00075, "decode.loss_dice": 0.23603, "decode.acc_seg": 99.71032, "loss": 0.23677, "time": 0.59582}
{"mode": "train", "epoch": 21, "iter": 1950, "lr": 8e-05, "memory": 17995, "data_time": 0.00897, "decode.loss_focal": 0.00075, "decode.loss_dice": 0.23454, "decode.acc_seg": 99.70723, "loss": 0.23529, "time": 0.54706}
{"mode": "train", "epoch": 22, "iter": 2000, "lr": 8e-05, "memory": 17995, "data_time": 0.05648, "decode.loss_focal": 0.00085, "decode.loss_dice": 0.23394, "decode.acc_seg": 99.67416, "loss": 0.2348, "time": 0.59554}
{"mode": "val", "epoch": 22, "iter": 105, "lr": 8e-05, "aAcc": 0.9991, "mIoU": 0.8558, "mVOE": 0.8479, "mASD": 0.7294, "mMSSD": 0.7409, "mAcc": 0.7082, "mFscore": 0.9039, "mPrecision": 0.9237, "mRecall": 0.8055, "mDice": 0.7252, "IoU.background": 0.9991, "IoU.scratch": 0.8126, "IoU.stain": 0.9077, "IoU.edgeDamage": 0.7037, "VOE.background": 0.7046, "VOE.scratch": 0.8911, "VOE.stain": 0.796, "VOE.edgeDamage": 1.0, "ASD.background": 0.722, "ASD.scratch": 0.7379, "ASD.stain": 0.7283, "ASD.edgeDamage": NaN, "MSSD.background": 0.7041, "MSSD.scratch": 0.7833, "MSSD.stain": 0.7352, "MSSD.edgeDamage": NaN, "Acc.background": 0.9996, "Acc.scratch": 0.6416, "Acc.stain": 0.8582, "Acc.edgeDamage": 0.3333, "Fscore.background": 0.9993, "Fscore.scratch": 0.7944, "Fscore.stain": 0.918, "Fscore.edgeDamage": NaN, "Precision.background": 0.9989, "Precision.scratch": 0.8407, "Precision.stain": 0.9314, "Precision.edgeDamage": NaN, "Recall.background": 0.9997, "Recall.scratch": 0.7611, "Recall.stain": 0.9055, "Recall.edgeDamage": 0.5556, "Dice.background": 0.999, "Dice.scratch": 0.6916, "Dice.stain": 0.877, "Dice.edgeDamage": 0.3333}
{"mode": "train", "epoch": 22, "iter": 2050, "lr": 8e-05, "memory": 17995, "data_time": 0.48325, "decode.loss_focal": 0.00077, "decode.loss_dice": 0.22721, "decode.acc_seg": 99.70145, "loss": 0.22798, "time": 1.01912}
{"mode": "train", "epoch": 23, "iter": 2100, "lr": 8e-05, "memory": 17995, "data_time": 0.05728, "decode.loss_focal": 0.00078, "decode.loss_dice": 0.23002, "decode.acc_seg": 99.70333, "loss": 0.2308, "time": 0.59291}
{"mode": "train", "epoch": 23, "iter": 2150, "lr": 8e-05, "memory": 17995, "data_time": 0.0048, "decode.loss_focal": 0.00081, "decode.loss_dice": 0.22401, "decode.acc_seg": 99.68925, "loss": 0.22481, "time": 0.54166}
{"mode": "train", "epoch": 24, "iter": 2200, "lr": 8e-05, "memory": 17995, "data_time": 0.05665, "decode.loss_focal": 0.00077, "decode.loss_dice": 0.21951, "decode.acc_seg": 99.69529, "loss": 0.22028, "time": 0.59358}
{"mode": "train", "epoch": 24, "iter": 2250, "lr": 8e-05, "memory": 17995, "data_time": 0.00502, "decode.loss_focal": 0.00076, "decode.loss_dice": 0.23024, "decode.acc_seg": 99.70436, "loss": 0.23101, "time": 0.54197}
