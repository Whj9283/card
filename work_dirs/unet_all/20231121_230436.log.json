{"env_info": "sys.platform: linux\nPython: 3.8.18 (default, Sep 11 2023, 13:40:15) [GCC 11.2.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3090\nCUDA_HOME: /environment/miniconda3\nNVCC: Cuda compilation tools, release 11.8, V11.8.89\nGCC: gcc (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0\nPyTorch: 1.11.0+cu113\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.3\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.2\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.12.0+cu113\nOpenCV: 4.8.1\nMMCV: 1.7.0\nMMCV Compiler: GCC 9.3\nMMCV CUDA Compiler: 11.3\nMMSegmentation: 0.29.1+", "seed": 1079198284, "exp_name": "unet_all.py", "mmseg_version": "0.29.1+", "config": "norm_cfg = dict(type='BN', requires_grad=True)\nbackbone_norm_cfg = dict(type='LN', requires_grad=True)\nmodel = dict(\n    type='EncoderDecoder',\n    pretrained=None,\n    backbone=dict(\n        type='UnetBackbone',\n        in_channels=3,\n        context_layer='seLayer',\n        channel_list=[64, 128, 256, 512]),\n    decode_head=dict(\n        type='UnetHead',\n        num_classes=4,\n        channels=64,\n        resPath=True,\n        attention=True,\n        threshold=0.2,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        loss_decode=[\n            dict(\n                type='FocalLoss',\n                use_sigmoid=True,\n                gamma=2.0,\n                alpha=0.25,\n                class_weight=[0.1, 0.4, 0.3, 0.2],\n                loss_weight=2.0),\n            dict(\n                type='DiceLoss',\n                loss_name='loss_dice',\n                class_weight=[0.1, 0.4, 0.3, 0.2],\n                loss_weight=2.0)\n        ]))\ntrain_cfg = dict()\ntest_cfg = dict(mode='whole')\ndataset_type = 'MyDataset'\ncrop_size = (512, 512)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations'),\n    dict(type='Resize', img_scale=(600, 600)),\n    dict(type='RandomCrop', crop_size=(512, 512), cat_max_ratio=0.75),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(type='Normalize', mean=[0, 0, 0], std=[1, 1, 1], to_rgb=True),\n    dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(512, 512),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=False),\n            dict(type='Normalize', mean=[0, 0, 0], std=[1, 1, 1], to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata_root = './datasets/'\ndata = dict(\n    samples_per_gpu=10,\n    workers_per_gpu=2,\n    train=dict(\n        type='MyDataset',\n        data_root='./datasets/',\n        img_dir='train/images',\n        ann_dir='train/labels',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations'),\n            dict(type='Resize', img_scale=(600, 600)),\n            dict(type='RandomCrop', crop_size=(512, 512), cat_max_ratio=0.75),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(type='PhotoMetricDistortion'),\n            dict(type='Normalize', mean=[0, 0, 0], std=[1, 1, 1], to_rgb=True),\n            dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n        ]),\n    val=dict(\n        type='MyDataset',\n        data_root='./datasets/',\n        img_dir='test/images',\n        ann_dir='test/labels',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(512, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=False),\n                    dict(\n                        type='Normalize',\n                        mean=[0, 0, 0],\n                        std=[1, 1, 1],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='MyDataset',\n        data_root='./datasets/',\n        img_dir='test/images',\n        ann_dir='test/labels',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(512, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=False),\n                    dict(\n                        type='Normalize',\n                        mean=[0, 0, 0],\n                        std=[1, 1, 1],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    interval=50,\n    hooks=[\n        dict(type='TensorboardLoggerHook'),\n        dict(type='TextLoggerHook', by_epoch=False)\n    ])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = False\noptimizer = dict(type='Adam', lr=0.0001, betas=(0.9, 0.999))\noptimizer_config = dict()\nlr_config = dict(policy='poly', power=0.9, min_lr=1e-05, by_epoch=False)\nrunner = dict(type='IterBasedRunner', max_iters=10000)\ncheckpoint_config = dict(by_epoch=False, save_optimizer=False, interval=5000)\nevaluation = dict(interval=500, metric=['mIoU', 'mFscore', 'mDice'])\nwork_dir = './work_dirs/unet_all'\ngpu_ids = [0]\nauto_resume = False\ndevice = 'cuda'\nseed = 1079198284\n", "CLASSES": ["background", "scratch", "stain", "edgeDamage"], "PALETTE": [[0, 0, 0], [1, 1, 1], [2, 2, 2], [3, 3, 3]]}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.0001, "memory": 17708, "data_time": 0.32827, "decode.loss_focal": 0.05137, "decode.loss_dice": 0.46845, "decode.acc_seg": 92.69767, "loss": 0.51982, "time": 1.09173}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.0001, "memory": 17708, "data_time": 0.07313, "decode.loss_focal": 0.03982, "decode.loss_dice": 0.46278, "decode.acc_seg": 99.37743, "loss": 0.5026, "time": 0.67269}
{"mode": "train", "epoch": 4, "iter": 150, "lr": 0.0001, "memory": 17708, "data_time": 0.07189, "decode.loss_focal": 0.03078, "decode.loss_dice": 0.45679, "decode.acc_seg": 99.37347, "loss": 0.48756, "time": 0.67392}
{"mode": "train", "epoch": 5, "iter": 200, "lr": 0.0001, "memory": 17708, "data_time": 0.08363, "decode.loss_focal": 0.02385, "decode.loss_dice": 0.44858, "decode.acc_seg": 98.96681, "loss": 0.47243, "time": 0.67979}
{"mode": "train", "epoch": 6, "iter": 250, "lr": 0.0001, "memory": 17708, "data_time": 0.07406, "decode.loss_focal": 0.01835, "decode.loss_dice": 0.43749, "decode.acc_seg": 98.81236, "loss": 0.45584, "time": 0.67549}
{"mode": "train", "epoch": 7, "iter": 300, "lr": 0.0001, "memory": 17708, "data_time": 0.0727, "decode.loss_focal": 0.01395, "decode.loss_dice": 0.42322, "decode.acc_seg": 99.04334, "loss": 0.43717, "time": 0.67708}
{"mode": "train", "epoch": 9, "iter": 350, "lr": 0.0001, "memory": 17708, "data_time": 0.13301, "decode.loss_focal": 0.01062, "decode.loss_dice": 0.40682, "decode.acc_seg": 99.25465, "loss": 0.41744, "time": 0.73686}
{"mode": "train", "epoch": 10, "iter": 400, "lr": 0.0001, "memory": 17708, "data_time": 0.07302, "decode.loss_focal": 0.00835, "decode.loss_dice": 0.37931, "decode.acc_seg": 99.37213, "loss": 0.38766, "time": 0.67687}
{"mode": "train", "epoch": 11, "iter": 450, "lr": 0.0001, "memory": 17708, "data_time": 0.07513, "decode.loss_focal": 0.00634, "decode.loss_dice": 0.34788, "decode.acc_seg": 99.52311, "loss": 0.35422, "time": 0.67865}
{"mode": "train", "epoch": 12, "iter": 500, "lr": 0.0001, "memory": 17708, "data_time": 0.07292, "decode.loss_focal": 0.00473, "decode.loss_dice": 0.31951, "decode.acc_seg": 99.60915, "loss": 0.32425, "time": 0.67796}
{"mode": "val", "epoch": 12, "iter": 105, "lr": 0.0001, "aAcc": 0.999, "mIoU": 0.8699, "mVOE": 0.8338, "mASD": 0.717, "mMSSD": 0.7606, "mAcc": 0.8195, "mFscore": 0.8611, "mPrecision": 0.8627, "mRecall": 0.8797, "mDice": 0.7916, "IoU.background": 0.999, "IoU.scratch": 0.799, "IoU.stain": 0.8468, "IoU.edgeDamage": 0.8348, "VOE.background": 0.7047, "VOE.scratch": 0.9047, "VOE.stain": 0.8569, "VOE.edgeDamage": 0.8689, "ASD.background": 0.7056, "ASD.scratch": 0.7217, "ASD.stain": 0.7201, "ASD.edgeDamage": 0.7204, "MSSD.background": 0.704, "MSSD.scratch": 0.7842, "MSSD.stain": 0.7762, "MSSD.edgeDamage": 0.7781, "Acc.background": 0.9987, "Acc.scratch": 0.6809, "Acc.stain": 0.933, "Acc.edgeDamage": 0.6652, "Fscore.background": 0.9992, "Fscore.scratch": 0.7719, "Fscore.stain": 0.845, "Fscore.edgeDamage": 0.8282, "Precision.background": 0.9993, "Precision.scratch": 0.7585, "Precision.stain": 0.7824, "Precision.edgeDamage": 0.9105, "Recall.background": 0.9992, "Recall.scratch": 0.7873, "Recall.stain": 0.9554, "Recall.edgeDamage": 0.7768, "Dice.background": 0.9988, "Dice.scratch": 0.6579, "Dice.stain": 0.7675, "Dice.edgeDamage": 0.7422}
