2023-11-22 15:00:01,004 - mmseg - INFO - Multi-processing start method is `None`
2023-11-22 15:00:01,006 - mmseg - INFO - OpenCV num_threads is `6
2023-11-22 15:00:01,043 - mmseg - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.18 (default, Sep 11 2023, 13:40:15) [GCC 11.2.0]
CUDA available: True
GPU 0: NVIDIA GeForce RTX 3090
CUDA_HOME: /environment/miniconda3
NVCC: Cuda compilation tools, release 11.8, V11.8.89
GCC: gcc (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0
PyTorch: 1.11.0+cu113
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

TorchVision: 0.12.0+cu113
OpenCV: 4.8.1
MMCV: 1.7.0
MMCV Compiler: GCC 9.3
MMCV CUDA Compiler: 11.3
MMSegmentation: 0.29.1+
------------------------------------------------------------

2023-11-22 15:00:01,044 - mmseg - INFO - Distributed training: False
2023-11-22 15:00:01,285 - mmseg - INFO - Config:
norm_cfg = dict(type='BN', requires_grad=True)
backbone_norm_cfg = dict(type='LN', requires_grad=True)
model = dict(
    type='EncoderDecoder',
    pretrained=None,
    backbone=dict(
        type='UnetBackbone',
        in_channels=3,
        context_layer='seLayer',
        channel_list=[64, 128, 256, 512]),
    decode_head=dict(
        type='UnetHead',
        num_classes=4,
        channels=64,
        threshold=0.2,
        norm_cfg=dict(type='BN', requires_grad=True),
        loss_decode=[
            dict(
                type='FocalLoss',
                use_sigmoid=True,
                gamma=2.0,
                alpha=0.25,
                class_weight=[0.1, 0.5, 0.2, 0.2],
                loss_weight=2.0),
            dict(
                type='DiceLoss',
                loss_name='loss_dice',
                class_weight=[0.1, 0.5, 0.2, 0.2],
                loss_weight=2.0)
        ]))
train_cfg = dict()
test_cfg = dict(mode='whole')
dataset_type = 'MyDataset'
crop_size = (512, 512)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations'),
    dict(type='Resize', img_scale=(600, 600)),
    dict(type='RandomCrop', crop_size=(512, 512), cat_max_ratio=0.75),
    dict(type='RandomFlip', flip_ratio=0.5),
    dict(type='PhotoMetricDistortion'),
    dict(type='Normalize', mean=[0, 0, 0], std=[1, 1, 1], to_rgb=True),
    dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_semantic_seg'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(512, 512),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=False),
            dict(type='Normalize', mean=[0, 0, 0], std=[1, 1, 1], to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
data_root = './datasets/'
data = dict(
    samples_per_gpu=5,
    workers_per_gpu=2,
    train=dict(
        type='MyDataset',
        data_root='./datasets/',
        img_dir='train/images',
        ann_dir='train/labels',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations'),
            dict(type='Resize', img_scale=(600, 600)),
            dict(type='RandomCrop', crop_size=(512, 512), cat_max_ratio=0.75),
            dict(type='RandomFlip', flip_ratio=0.5),
            dict(type='PhotoMetricDistortion'),
            dict(type='Normalize', mean=[0, 0, 0], std=[1, 1, 1], to_rgb=True),
            dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),
            dict(type='DefaultFormatBundle'),
            dict(type='Collect', keys=['img', 'gt_semantic_seg'])
        ]),
    val=dict(
        type='MyDataset',
        data_root='./datasets/',
        img_dir='test/images',
        ann_dir='test/labels',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(512, 512),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=False),
                    dict(
                        type='Normalize',
                        mean=[0, 0, 0],
                        std=[1, 1, 1],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]),
    test=dict(
        type='MyDataset',
        data_root='./datasets/',
        img_dir='test/images',
        ann_dir='test/labels',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(512, 512),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=False),
                    dict(
                        type='Normalize',
                        mean=[0, 0, 0],
                        std=[1, 1, 1],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]))
log_config = dict(
    interval=50,
    hooks=[
        dict(type='TensorboardLoggerHook'),
        dict(type='TextLoggerHook', by_epoch=False)
    ])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
cudnn_benchmark = False
optimizer = dict(type='Adam', lr=0.0001, betas=(0.9, 0.999))
optimizer_config = dict()
lr_config = dict(policy='poly', power=0.9, min_lr=1e-05, by_epoch=False)
runner = dict(type='IterBasedRunner', max_iters=10000)
checkpoint_config = dict(by_epoch=False, save_optimizer=False, interval=5000)
evaluation = dict(interval=500, metric=['mIoU', 'mFscore', 'mDice'])
work_dir = './work_dirs/unet_all'
gpu_ids = [0]
auto_resume = False

2023-11-22 15:00:01,285 - mmseg - INFO - Set random seed to 1540549738, deterministic: False
2023-11-22 15:00:01,400 - mmseg - INFO - initialize UnetHead with init_cfg {'type': 'Normal', 'std': 0.01, 'override': {'name': 'conv_seg'}}
Name of parameter - Initialization information

backbone.inc.conv.conv.0.weight - torch.Size([64, 3, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.inc.conv.conv.0.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.inc.conv.conv.1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.inc.conv.conv.1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.inc.conv.conv.3.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.inc.conv.conv.3.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.inc.conv.conv.4.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.inc.conv.conv.4.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.down1.down_conv.1.conv.0.weight - torch.Size([128, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.down1.down_conv.1.conv.0.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.down1.down_conv.1.conv.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.down1.down_conv.1.conv.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.down1.down_conv.1.conv.3.weight - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.down1.down_conv.1.conv.3.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.down1.down_conv.1.conv.4.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.down1.down_conv.1.conv.4.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.down2.down_conv.1.conv.0.weight - torch.Size([256, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.down2.down_conv.1.conv.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.down2.down_conv.1.conv.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.down2.down_conv.1.conv.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.down2.down_conv.1.conv.3.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.down2.down_conv.1.conv.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.down2.down_conv.1.conv.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.down2.down_conv.1.conv.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.down3.down_conv.1.conv.0.weight - torch.Size([512, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.down3.down_conv.1.conv.0.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.down3.down_conv.1.conv.1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.down3.down_conv.1.conv.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.down3.down_conv.1.conv.3.weight - torch.Size([512, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.down3.down_conv.1.conv.3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.down3.down_conv.1.conv.4.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.down3.down_conv.1.conv.4.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.down4.down_conv.1.conv.0.weight - torch.Size([512, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.down4.down_conv.1.conv.0.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.down4.down_conv.1.conv.1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.down4.down_conv.1.conv.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.down4.down_conv.1.conv.3.weight - torch.Size([512, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.down4.down_conv.1.conv.3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.down4.down_conv.1.conv.4.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.down4.down_conv.1.conv.4.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.context_layer1_1.fc.0.weight - torch.Size([16, 64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.context_layer1_1.fc.0.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.context_layer1_1.fc.2.weight - torch.Size([64, 16]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.context_layer1_1.fc.2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.context_layer2_1.fc.0.weight - torch.Size([32, 128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.context_layer2_1.fc.0.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.context_layer2_1.fc.2.weight - torch.Size([128, 32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.context_layer2_1.fc.2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.context_layer3_1.fc.0.weight - torch.Size([64, 256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.context_layer3_1.fc.0.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.context_layer3_1.fc.2.weight - torch.Size([256, 64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.context_layer3_1.fc.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.context_layer4_1.fc.0.weight - torch.Size([128, 512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.context_layer4_1.fc.0.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.context_layer4_1.fc.2.weight - torch.Size([512, 128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.context_layer4_1.fc.2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.conv_seg.weight - torch.Size([4, 64, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.conv_seg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.up1.conv.conv.0.weight - torch.Size([256, 1024, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up1.conv.conv.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up1.conv.conv.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up1.conv.conv.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up1.conv.conv.3.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up1.conv.conv.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up1.conv.conv.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up1.conv.conv.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up2.conv.conv.0.weight - torch.Size([128, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up2.conv.conv.0.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up2.conv.conv.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up2.conv.conv.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up2.conv.conv.3.weight - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up2.conv.conv.3.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up2.conv.conv.4.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up2.conv.conv.4.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up3.conv.conv.0.weight - torch.Size([64, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up3.conv.conv.0.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up3.conv.conv.1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up3.conv.conv.1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up3.conv.conv.3.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up3.conv.conv.3.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up3.conv.conv.4.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up3.conv.conv.4.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up4.conv.conv.0.weight - torch.Size([64, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up4.conv.conv.0.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up4.conv.conv.1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up4.conv.conv.1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up4.conv.conv.3.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up4.conv.conv.3.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up4.conv.conv.4.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.up4.conv.conv.4.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  
2023-11-22 15:00:01,404 - mmseg - INFO - EncoderDecoder(
  (backbone): UnetBackbone(
    (inc): InConv(
      (conv): DoubleConv(
        (conv): Sequential(
          (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU(inplace=True)
        )
      )
    )
    (down1): Down(
      (down_conv): Sequential(
        (0): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
        (1): DoubleConv(
          (conv): Sequential(
            (0): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU(inplace=True)
            (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU(inplace=True)
          )
        )
      )
    )
    (down2): Down(
      (down_conv): Sequential(
        (0): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
        (1): DoubleConv(
          (conv): Sequential(
            (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU(inplace=True)
            (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU(inplace=True)
          )
        )
      )
    )
    (down3): Down(
      (down_conv): Sequential(
        (0): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
        (1): DoubleConv(
          (conv): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU(inplace=True)
            (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU(inplace=True)
          )
        )
      )
    )
    (down4): Down(
      (down_conv): Sequential(
        (0): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
        (1): DoubleConv(
          (conv): Sequential(
            (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU(inplace=True)
            (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU(inplace=True)
          )
        )
      )
    )
    (context_layer1_1): SELayer(
      (avg_pool): AdaptiveAvgPool2d(output_size=1)
      (fc): Sequential(
        (0): Linear(in_features=64, out_features=16, bias=True)
        (1): ReLU(inplace=True)
        (2): Linear(in_features=16, out_features=64, bias=True)
        (3): Hswish(
          (relu): ReLU6(inplace=True)
        )
      )
    )
    (context_layer2_1): SELayer(
      (avg_pool): AdaptiveAvgPool2d(output_size=1)
      (fc): Sequential(
        (0): Linear(in_features=128, out_features=32, bias=True)
        (1): ReLU(inplace=True)
        (2): Linear(in_features=32, out_features=128, bias=True)
        (3): Hswish(
          (relu): ReLU6(inplace=True)
        )
      )
    )
    (context_layer3_1): SELayer(
      (avg_pool): AdaptiveAvgPool2d(output_size=1)
      (fc): Sequential(
        (0): Linear(in_features=256, out_features=64, bias=True)
        (1): ReLU(inplace=True)
        (2): Linear(in_features=64, out_features=256, bias=True)
        (3): Hswish(
          (relu): ReLU6(inplace=True)
        )
      )
    )
    (context_layer4_1): SELayer(
      (avg_pool): AdaptiveAvgPool2d(output_size=1)
      (fc): Sequential(
        (0): Linear(in_features=512, out_features=128, bias=True)
        (1): ReLU(inplace=True)
        (2): Linear(in_features=128, out_features=512, bias=True)
        (3): Hswish(
          (relu): ReLU6(inplace=True)
        )
      )
    )
  )
  (decode_head): UnetHead(
    input_transform=None, ignore_index=255, align_corners=False
    (loss_decode): ModuleList(
      (0): FocalLoss()
      (1): DiceLoss()
    )
    (conv_seg): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
    (dropout): Dropout2d(p=0.1, inplace=False)
    (up1): Up(
      (up): Upsample(scale_factor=2.0, mode=bilinear)
      (conv): DoubleConv(
        (conv): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU(inplace=True)
        )
      )
    )
    (up2): Up(
      (up): Upsample(scale_factor=2.0, mode=bilinear)
      (conv): DoubleConv(
        (conv): Sequential(
          (0): Conv2d(512, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU(inplace=True)
        )
      )
    )
    (up3): Up(
      (up): Upsample(scale_factor=2.0, mode=bilinear)
      (conv): DoubleConv(
        (conv): Sequential(
          (0): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU(inplace=True)
        )
      )
    )
    (up4): Up(
      (up): Upsample(scale_factor=2.0, mode=bilinear)
      (conv): DoubleConv(
        (conv): Sequential(
          (0): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU(inplace=True)
        )
      )
    )
  )
  init_cfg={'type': 'Normal', 'std': 0.01, 'override': {'name': 'conv_seg'}}
)
2023-11-22 15:00:01,414 - mmseg - INFO - Loaded 474 images
2023-11-22 15:00:08,423 - mmseg - INFO - Loaded 105 images
2023-11-22 15:00:08,424 - mmseg - INFO - Start running, host: featurize@featurize, work_dir: /home/featurize/work/test/work_dirs/unet_all
2023-11-22 15:00:08,424 - mmseg - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) PolyLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TensorboardLoggerHook              
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) PolyLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TensorboardLoggerHook              
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) PolyLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TensorboardLoggerHook              
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TensorboardLoggerHook              
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TensorboardLoggerHook              
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TensorboardLoggerHook              
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TensorboardLoggerHook              
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2023-11-22 15:00:08,424 - mmseg - INFO - workflow: [('train', 1)], max: 10000 iters
2023-11-22 15:00:08,424 - mmseg - INFO - Checkpoints will be saved to /home/featurize/work/test/work_dirs/unet_all by HardDiskBackend.
2023-11-22 15:00:23,510 - mmseg - INFO - Iter [50/10000]	lr: 9.960e-05, eta: 0:46:08, time: 0.278, data_time: 0.112, memory: 7716, decode.loss_focal: 0.0516, decode.loss_dice: 0.4682, decode.acc_seg: 91.2349, loss: 0.5199
2023-11-22 15:00:40,558 - mmseg - INFO - Iter [100/10000]	lr: 9.920e-05, eta: 0:51:04, time: 0.341, data_time: 0.178, memory: 7716, decode.loss_focal: 0.0400, decode.loss_dice: 0.4617, decode.acc_seg: 98.1779, loss: 0.5016
2023-11-22 15:00:55,561 - mmseg - INFO - Iter [150/10000]	lr: 9.879e-05, eta: 0:50:18, time: 0.300, data_time: 0.119, memory: 7716, decode.loss_focal: 0.0306, decode.loss_dice: 0.4531, decode.acc_seg: 98.5927, loss: 0.4836
2023-11-22 15:01:12,225 - mmseg - INFO - Iter [200/10000]	lr: 9.839e-05, eta: 0:51:08, time: 0.333, data_time: 0.160, memory: 7716, decode.loss_focal: 0.0230, decode.loss_dice: 0.4434, decode.acc_seg: 98.7177, loss: 0.4665
2023-11-22 15:01:27,033 - mmseg - INFO - Iter [250/10000]	lr: 9.798e-05, eta: 0:50:20, time: 0.296, data_time: 0.128, memory: 7716, decode.loss_focal: 0.0176, decode.loss_dice: 0.4330, decode.acc_seg: 98.7328, loss: 0.4506
2023-11-22 15:01:42,779 - mmseg - INFO - Iter [300/10000]	lr: 9.757e-05, eta: 0:50:12, time: 0.315, data_time: 0.133, memory: 7716, decode.loss_focal: 0.0135, decode.loss_dice: 0.4208, decode.acc_seg: 99.1721, loss: 0.4343
2023-11-22 15:01:56,145 - mmseg - INFO - Iter [350/10000]	lr: 9.717e-05, eta: 0:48:57, time: 0.267, data_time: 0.122, memory: 7716, decode.loss_focal: 0.0106, decode.loss_dice: 0.4081, decode.acc_seg: 99.2518, loss: 0.4187
2023-11-22 15:02:12,041 - mmseg - INFO - Iter [400/10000]	lr: 9.676e-05, eta: 0:48:58, time: 0.318, data_time: 0.146, memory: 7716, decode.loss_focal: 0.0085, decode.loss_dice: 0.3913, decode.acc_seg: 99.3030, loss: 0.3998
2023-11-22 15:02:25,539 - mmseg - INFO - Iter [450/10000]	lr: 9.635e-05, eta: 0:48:04, time: 0.270, data_time: 0.088, memory: 7716, decode.loss_focal: 0.0065, decode.loss_dice: 0.3631, decode.acc_seg: 99.4328, loss: 0.3696
2023-11-22 15:02:41,449 - mmseg - INFO - Iter [500/10000]	lr: 9.595e-05, eta: 0:48:05, time: 0.318, data_time: 0.152, memory: 7716, decode.loss_focal: 0.0051, decode.loss_dice: 0.3503, decode.acc_seg: 99.4052, loss: 0.3554
2023-11-22 15:03:03,781 - mmseg - INFO - per class results:
2023-11-22 15:03:03,782 - mmseg - INFO - 
+------------+-------+-------+-------+-------+-------+--------+-----------+--------+-------+
|   Class    |  IoU  |  VOE  |  ASD  |  MSSD |  Acc  | Fscore | Precision | Recall |  Dice |
+------------+-------+-------+-------+-------+-------+--------+-----------+--------+-------+
| background | 99.88 | 70.49 |  70.8 | 70.41 | 99.83 | 99.91  |   99.93   | 99.89  | 99.86 |
|  scratch   | 80.01 | 90.36 | 72.35 | 78.14 | 65.02 | 77.37  |   78.12   | 76.68  | 66.06 |
|   stain    | 81.31 | 89.06 | 72.52 | 79.02 | 84.33 | 79.52  |   74.06   | 89.55  | 69.28 |
| edgeDamage | 82.23 | 88.14 | 72.31 | 77.96 | 79.35 | 80.96  |   77.23   | 86.23  | 71.44 |
+------------+-------+-------+-------+-------+-------+--------+-----------+--------+-------+
2023-11-22 15:03:03,782 - mmseg - INFO - Summary:
2023-11-22 15:03:03,783 - mmseg - INFO - 
+-------+-------+-------+------+-------+-------+---------+------------+---------+-------+
|  aAcc |  mIoU |  mVOE | mASD | mMSSD |  mAcc | mFscore | mPrecision | mRecall | mDice |
+-------+-------+-------+------+-------+-------+---------+------------+---------+-------+
| 99.88 | 85.86 | 84.51 | 72.0 | 76.38 | 82.13 |  84.44  |   82.33    |  88.09  | 76.66 |
+-------+-------+-------+------+-------+-------+---------+------------+---------+-------+
2023-11-22 15:03:03,881 - mmseg - INFO - Iter(val) [105]	aAcc: 0.9988, mIoU: 0.8586, mVOE: 0.8451, mASD: 0.7200, mMSSD: 0.7638, mAcc: 0.8213, mFscore: 0.8444, mPrecision: 0.8233, mRecall: 0.8809, mDice: 0.7666, IoU.background: 0.9988, IoU.scratch: 0.8001, IoU.stain: 0.8131, IoU.edgeDamage: 0.8223, VOE.background: 0.7049, VOE.scratch: 0.9036, VOE.stain: 0.8906, VOE.edgeDamage: 0.8814, ASD.background: 0.7080, ASD.scratch: 0.7235, ASD.stain: 0.7252, ASD.edgeDamage: 0.7231, MSSD.background: 0.7041, MSSD.scratch: 0.7814, MSSD.stain: 0.7902, MSSD.edgeDamage: 0.7796, Acc.background: 0.9983, Acc.scratch: 0.6502, Acc.stain: 0.8433, Acc.edgeDamage: 0.7935, Fscore.background: 0.9991, Fscore.scratch: 0.7737, Fscore.stain: 0.7952, Fscore.edgeDamage: 0.8096, Precision.background: 0.9993, Precision.scratch: 0.7812, Precision.stain: 0.7406, Precision.edgeDamage: 0.7723, Recall.background: 0.9989, Recall.scratch: 0.7668, Recall.stain: 0.8955, Recall.edgeDamage: 0.8623, Dice.background: 0.9986, Dice.scratch: 0.6606, Dice.stain: 0.6928, Dice.edgeDamage: 0.7144
2023-11-22 15:03:16,996 - mmseg - INFO - Iter [550/10000]	lr: 9.554e-05, eta: 0:53:39, time: 0.711, data_time: 0.517, memory: 7716, decode.loss_focal: 0.0041, decode.loss_dice: 0.3243, decode.acc_seg: 99.4904, loss: 0.3284
2023-11-22 15:03:33,169 - mmseg - INFO - Iter [600/10000]	lr: 9.513e-05, eta: 0:53:09, time: 0.323, data_time: 0.140, memory: 7716, decode.loss_focal: 0.0033, decode.loss_dice: 0.3224, decode.acc_seg: 99.5387, loss: 0.3257
2023-11-22 15:03:46,696 - mmseg - INFO - Iter [650/10000]	lr: 9.473e-05, eta: 0:52:02, time: 0.270, data_time: 0.087, memory: 7716, decode.loss_focal: 0.0029, decode.loss_dice: 0.3055, decode.acc_seg: 99.5279, loss: 0.3084
2023-11-22 15:04:02,873 - mmseg - INFO - Iter [700/10000]	lr: 9.432e-05, eta: 0:51:39, time: 0.324, data_time: 0.154, memory: 7716, decode.loss_focal: 0.0025, decode.loss_dice: 0.3072, decode.acc_seg: 99.5652, loss: 0.3097
2023-11-22 15:04:17,015 - mmseg - INFO - Iter [750/10000]	lr: 9.391e-05, eta: 0:50:51, time: 0.283, data_time: 0.099, memory: 7716, decode.loss_focal: 0.0023, decode.loss_dice: 0.2952, decode.acc_seg: 99.5545, loss: 0.2975
2023-11-22 15:04:33,112 - mmseg - INFO - Iter [800/10000]	lr: 9.350e-05, eta: 0:50:30, time: 0.322, data_time: 0.138, memory: 7716, decode.loss_focal: 0.0019, decode.loss_dice: 0.2838, decode.acc_seg: 99.6416, loss: 0.2857
2023-11-22 15:04:49,574 - mmseg - INFO - Iter [850/10000]	lr: 9.309e-05, eta: 0:50:13, time: 0.329, data_time: 0.144, memory: 7716, decode.loss_focal: 0.0019, decode.loss_dice: 0.2842, decode.acc_seg: 99.5818, loss: 0.2861
2023-11-22 15:05:03,199 - mmseg - INFO - Iter [900/10000]	lr: 9.268e-05, eta: 0:49:28, time: 0.273, data_time: 0.089, memory: 7716, decode.loss_focal: 0.0017, decode.loss_dice: 0.2836, decode.acc_seg: 99.6287, loss: 0.2853
2023-11-22 15:05:19,268 - mmseg - INFO - Iter [950/10000]	lr: 9.228e-05, eta: 0:49:09, time: 0.321, data_time: 0.137, memory: 7716, decode.loss_focal: 0.0015, decode.loss_dice: 0.2805, decode.acc_seg: 99.6307, loss: 0.2820
2023-11-22 15:05:32,799 - mmseg - INFO - Exp name: unet_all.py
2023-11-22 15:05:32,799 - mmseg - INFO - Iter [1000/10000]	lr: 9.187e-05, eta: 0:48:28, time: 0.270, data_time: 0.087, memory: 7716, decode.loss_focal: 0.0014, decode.loss_dice: 0.2750, decode.acc_seg: 99.6306, loss: 0.2764
2023-11-22 15:05:55,391 - mmseg - INFO - per class results:
2023-11-22 15:05:55,392 - mmseg - INFO - 
+------------+-------+-------+-------+-------+-------+--------+-----------+--------+-------+
|   Class    |  IoU  |  VOE  |  ASD  |  MSSD |  Acc  | Fscore | Precision | Recall |  Dice |
+------------+-------+-------+-------+-------+-------+--------+-----------+--------+-------+
| background | 99.88 | 70.49 |  70.8 | 70.41 | 99.82 | 99.91  |   99.94   | 99.88  | 99.86 |
|  scratch   | 81.48 | 88.89 | 72.33 | 78.03 | 65.52 | 79.79  |   83.39   | 77.01  | 69.69 |
|   stain    |  88.1 | 82.27 | 71.67 | 74.77 | 80.18 | 88.83  |   91.16   | 86.79  | 83.25 |
| edgeDamage | 80.07 |  90.3 | 72.73 | 80.05 | 90.27 | 77.49  |   70.97   | 93.51  | 66.23 |
+------------+-------+-------+-------+-------+-------+--------+-----------+--------+-------+
2023-11-22 15:05:55,392 - mmseg - INFO - Summary:
2023-11-22 15:05:55,392 - mmseg - INFO - 
+-------+-------+-------+-------+-------+-------+---------+------------+---------+-------+
|  aAcc |  mIoU |  mVOE |  mASD | mMSSD |  mAcc | mFscore | mPrecision | mRecall | mDice |
+-------+-------+-------+-------+-------+-------+---------+------------+---------+-------+
| 99.88 | 87.38 | 82.99 | 71.88 | 75.82 | 83.95 |   86.5  |   86.37    |   89.3  | 79.76 |
+-------+-------+-------+-------+-------+-------+---------+------------+---------+-------+
2023-11-22 15:05:55,408 - mmseg - INFO - Exp name: unet_all.py
2023-11-22 15:05:55,408 - mmseg - INFO - Iter(val) [105]	aAcc: 0.9988, mIoU: 0.8738, mVOE: 0.8299, mASD: 0.7188, mMSSD: 0.7582, mAcc: 0.8395, mFscore: 0.8650, mPrecision: 0.8637, mRecall: 0.8930, mDice: 0.7976, IoU.background: 0.9988, IoU.scratch: 0.8148, IoU.stain: 0.8810, IoU.edgeDamage: 0.8007, VOE.background: 0.7049, VOE.scratch: 0.8889, VOE.stain: 0.8227, VOE.edgeDamage: 0.9030, ASD.background: 0.7080, ASD.scratch: 0.7233, ASD.stain: 0.7167, ASD.edgeDamage: 0.7273, MSSD.background: 0.7041, MSSD.scratch: 0.7803, MSSD.stain: 0.7477, MSSD.edgeDamage: 0.8005, Acc.background: 0.9982, Acc.scratch: 0.6552, Acc.stain: 0.8018, Acc.edgeDamage: 0.9027, Fscore.background: 0.9991, Fscore.scratch: 0.7979, Fscore.stain: 0.8883, Fscore.edgeDamage: 0.7749, Precision.background: 0.9994, Precision.scratch: 0.8339, Precision.stain: 0.9116, Precision.edgeDamage: 0.7097, Recall.background: 0.9988, Recall.scratch: 0.7701, Recall.stain: 0.8679, Recall.edgeDamage: 0.9351, Dice.background: 0.9986, Dice.scratch: 0.6969, Dice.stain: 0.8325, Dice.edgeDamage: 0.6623
2023-11-22 15:06:12,496 - mmseg - INFO - Iter [1050/10000]	lr: 9.146e-05, eta: 0:51:33, time: 0.794, data_time: 0.604, memory: 7716, decode.loss_focal: 0.0013, decode.loss_dice: 0.2736, decode.acc_seg: 99.6624, loss: 0.2749
2023-11-22 15:06:26,746 - mmseg - INFO - Iter [1100/10000]	lr: 9.105e-05, eta: 0:50:51, time: 0.285, data_time: 0.106, memory: 7716, decode.loss_focal: 0.0013, decode.loss_dice: 0.2704, decode.acc_seg: 99.6104, loss: 0.2718
2023-11-22 15:06:44,380 - mmseg - INFO - Iter [1150/10000]	lr: 9.064e-05, eta: 0:50:38, time: 0.353, data_time: 0.180, memory: 7716, decode.loss_focal: 0.0011, decode.loss_dice: 0.2624, decode.acc_seg: 99.6809, loss: 0.2635
2023-11-22 15:06:57,743 - mmseg - INFO - Iter [1200/10000]	lr: 9.023e-05, eta: 0:49:52, time: 0.267, data_time: 0.083, memory: 7716, decode.loss_focal: 0.0012, decode.loss_dice: 0.2546, decode.acc_seg: 99.6605, loss: 0.2557
2023-11-22 15:07:14,297 - mmseg - INFO - Iter [1250/10000]	lr: 8.982e-05, eta: 0:49:32, time: 0.331, data_time: 0.173, memory: 7716, decode.loss_focal: 0.0010, decode.loss_dice: 0.2402, decode.acc_seg: 99.6917, loss: 0.2413
2023-11-22 15:07:28,270 - mmseg - INFO - Iter [1300/10000]	lr: 8.941e-05, eta: 0:48:55, time: 0.280, data_time: 0.117, memory: 7716, decode.loss_focal: 0.0011, decode.loss_dice: 0.2506, decode.acc_seg: 99.6245, loss: 0.2517
2023-11-22 15:07:44,685 - mmseg - INFO - Iter [1350/10000]	lr: 8.900e-05, eta: 0:48:35, time: 0.328, data_time: 0.147, memory: 7716, decode.loss_focal: 0.0010, decode.loss_dice: 0.2375, decode.acc_seg: 99.7056, loss: 0.2385
2023-11-22 15:07:59,214 - mmseg - INFO - Iter [1400/10000]	lr: 8.858e-05, eta: 0:48:04, time: 0.291, data_time: 0.124, memory: 7716, decode.loss_focal: 0.0010, decode.loss_dice: 0.2312, decode.acc_seg: 99.7063, loss: 0.2322
2023-11-22 15:08:15,593 - mmseg - INFO - Iter [1450/10000]	lr: 8.817e-05, eta: 0:47:45, time: 0.328, data_time: 0.191, memory: 7716, decode.loss_focal: 0.0010, decode.loss_dice: 0.2372, decode.acc_seg: 99.6848, loss: 0.2382
2023-11-22 15:08:29,153 - mmseg - INFO - Iter [1500/10000]	lr: 8.776e-05, eta: 0:47:10, time: 0.271, data_time: 0.139, memory: 7716, decode.loss_focal: 0.0010, decode.loss_dice: 0.2243, decode.acc_seg: 99.6679, loss: 0.2254
2023-11-22 15:08:53,007 - mmseg - INFO - per class results:
2023-11-22 15:08:53,008 - mmseg - INFO - 
+------------+-------+-------+-------+-------+-------+--------+-----------+--------+-------+
|   Class    |  IoU  |  VOE  |  ASD  |  MSSD |  Acc  | Fscore | Precision | Recall |  Dice |
+------------+-------+-------+-------+-------+-------+--------+-----------+--------+-------+
| background | 99.92 | 70.45 |  70.8 | 70.39 | 99.93 | 99.94  |   99.93   | 99.96  | 99.92 |
|  scratch   | 82.83 | 87.54 | 72.16 | 77.21 | 69.22 | 81.88  |    84.8   | 79.48  | 72.81 |
|   stain    | 86.56 | 83.81 | 71.92 | 76.02 | 74.57 | 86.97  |   92.19   | 83.05  | 80.45 |
| edgeDamage | 85.83 | 84.54 | 71.75 | 75.18 | 78.35 | 86.03  |   86.52   | 85.57  | 79.05 |
+------------+-------+-------+-------+-------+-------+--------+-----------+--------+-------+
2023-11-22 15:08:53,008 - mmseg - INFO - Summary:
2023-11-22 15:08:53,008 - mmseg - INFO - 
+-------+-------+-------+-------+-------+-------+---------+------------+---------+-------+
|  aAcc |  mIoU |  mVOE |  mASD | mMSSD |  mAcc | mFscore | mPrecision | mRecall | mDice |
+-------+-------+-------+-------+-------+-------+---------+------------+---------+-------+
| 99.93 | 88.79 | 81.58 | 71.66 |  74.7 | 80.52 |  88.71  |   90.86    |  87.01  | 83.06 |
+-------+-------+-------+-------+-------+-------+---------+------------+---------+-------+
2023-11-22 15:08:53,025 - mmseg - INFO - Iter(val) [105]	aAcc: 0.9993, mIoU: 0.8879, mVOE: 0.8158, mASD: 0.7166, mMSSD: 0.7470, mAcc: 0.8052, mFscore: 0.8871, mPrecision: 0.9086, mRecall: 0.8701, mDice: 0.8306, IoU.background: 0.9992, IoU.scratch: 0.8283, IoU.stain: 0.8656, IoU.edgeDamage: 0.8583, VOE.background: 0.7045, VOE.scratch: 0.8754, VOE.stain: 0.8381, VOE.edgeDamage: 0.8454, ASD.background: 0.7080, ASD.scratch: 0.7216, ASD.stain: 0.7192, ASD.edgeDamage: 0.7175, MSSD.background: 0.7039, MSSD.scratch: 0.7721, MSSD.stain: 0.7602, MSSD.edgeDamage: 0.7518, Acc.background: 0.9993, Acc.scratch: 0.6922, Acc.stain: 0.7457, Acc.edgeDamage: 0.7835, Fscore.background: 0.9994, Fscore.scratch: 0.8188, Fscore.stain: 0.8697, Fscore.edgeDamage: 0.8603, Precision.background: 0.9993, Precision.scratch: 0.8480, Precision.stain: 0.9219, Precision.edgeDamage: 0.8652, Recall.background: 0.9996, Recall.scratch: 0.7948, Recall.stain: 0.8305, Recall.edgeDamage: 0.8557, Dice.background: 0.9992, Dice.scratch: 0.7281, Dice.stain: 0.8045, Dice.edgeDamage: 0.7905
2023-11-22 15:09:09,543 - mmseg - INFO - Iter [1550/10000]	lr: 8.735e-05, eta: 0:49:03, time: 0.808, data_time: 0.623, memory: 7716, decode.loss_focal: 0.0009, decode.loss_dice: 0.2226, decode.acc_seg: 99.7144, loss: 0.2235
2023-11-22 15:09:26,049 - mmseg - INFO - Iter [1600/10000]	lr: 8.694e-05, eta: 0:48:41, time: 0.330, data_time: 0.190, memory: 7716, decode.loss_focal: 0.0011, decode.loss_dice: 0.2230, decode.acc_seg: 99.6548, loss: 0.2241
2023-11-22 15:09:41,309 - mmseg - INFO - Iter [1650/10000]	lr: 8.653e-05, eta: 0:48:13, time: 0.305, data_time: 0.164, memory: 7716, decode.loss_focal: 0.0010, decode.loss_dice: 0.2175, decode.acc_seg: 99.6897, loss: 0.2185
2023-11-22 15:09:58,254 - mmseg - INFO - Iter [1700/10000]	lr: 8.611e-05, eta: 0:47:53, time: 0.339, data_time: 0.174, memory: 7716, decode.loss_focal: 0.0011, decode.loss_dice: 0.2402, decode.acc_seg: 99.6357, loss: 0.2413
2023-11-22 15:10:12,991 - mmseg - INFO - Iter [1750/10000]	lr: 8.570e-05, eta: 0:47:24, time: 0.295, data_time: 0.128, memory: 7716, decode.loss_focal: 0.0010, decode.loss_dice: 0.2289, decode.acc_seg: 99.6837, loss: 0.2298
2023-11-22 15:10:30,147 - mmseg - INFO - Iter [1800/10000]	lr: 8.529e-05, eta: 0:47:06, time: 0.343, data_time: 0.162, memory: 7716, decode.loss_focal: 0.0010, decode.loss_dice: 0.2233, decode.acc_seg: 99.6529, loss: 0.2243
2023-11-22 15:10:43,729 - mmseg - INFO - Iter [1850/10000]	lr: 8.487e-05, eta: 0:46:33, time: 0.272, data_time: 0.100, memory: 7716, decode.loss_focal: 0.0009, decode.loss_dice: 0.2257, decode.acc_seg: 99.7120, loss: 0.2266
2023-11-22 15:10:59,537 - mmseg - INFO - Iter [1900/10000]	lr: 8.446e-05, eta: 0:46:10, time: 0.316, data_time: 0.165, memory: 7716, decode.loss_focal: 0.0010, decode.loss_dice: 0.2270, decode.acc_seg: 99.6759, loss: 0.2280
2023-11-22 15:11:13,025 - mmseg - INFO - Iter [1950/10000]	lr: 8.405e-05, eta: 0:45:38, time: 0.270, data_time: 0.103, memory: 7716, decode.loss_focal: 0.0010, decode.loss_dice: 0.2178, decode.acc_seg: 99.6593, loss: 0.2188
2023-11-22 15:11:29,653 - mmseg - INFO - Exp name: unet_all.py
2023-11-22 15:11:29,654 - mmseg - INFO - Iter [2000/10000]	lr: 8.363e-05, eta: 0:45:20, time: 0.332, data_time: 0.167, memory: 7716, decode.loss_focal: 0.0010, decode.loss_dice: 0.2189, decode.acc_seg: 99.6682, loss: 0.2199
2023-11-22 15:11:52,581 - mmseg - INFO - per class results:
2023-11-22 15:11:52,583 - mmseg - INFO - 
+------------+-------+-------+-------+-------+-------+--------+-----------+--------+-------+
|   Class    |  IoU  |  VOE  |  ASD  |  MSSD |  Acc  | Fscore | Precision | Recall |  Dice |
+------------+-------+-------+-------+-------+-------+--------+-----------+--------+-------+
| background | 99.91 | 70.46 |  70.8 | 70.39 | 99.89 | 99.93  |   99.94   | 99.93  |  99.9 |
|  scratch   | 82.94 | 87.43 | 72.19 | 77.33 | 68.67 | 82.03  |   85.76   | 79.11  | 73.04 |
|   stain    | 89.03 | 81.34 | 71.63 | 74.57 |  81.1 | 89.91  |   92.84   |  87.4  | 84.86 |
| edgeDamage | 82.75 | 87.62 | 72.32 |  78.0 | 83.43 | 81.76  |   77.11   | 88.95  | 72.64 |
+------------+-------+-------+-------+-------+-------+--------+-----------+--------+-------+
2023-11-22 15:11:52,583 - mmseg - INFO - Summary:
2023-11-22 15:11:52,583 - mmseg - INFO - 
+-------+-------+-------+-------+-------+-------+---------+------------+---------+-------+
|  aAcc |  mIoU |  mVOE |  mASD | mMSSD |  mAcc | mFscore | mPrecision | mRecall | mDice |
+-------+-------+-------+-------+-------+-------+---------+------------+---------+-------+
| 99.91 | 88.66 | 81.71 | 71.73 | 75.07 | 83.27 |  88.41  |   88.91    |  88.85  | 82.61 |
+-------+-------+-------+-------+-------+-------+---------+------------+---------+-------+
2023-11-22 15:11:52,607 - mmseg - INFO - Exp name: unet_all.py
2023-11-22 15:11:52,607 - mmseg - INFO - Iter(val) [105]	aAcc: 0.9991, mIoU: 0.8866, mVOE: 0.8171, mASD: 0.7173, mMSSD: 0.7507, mAcc: 0.8327, mFscore: 0.8841, mPrecision: 0.8891, mRecall: 0.8885, mDice: 0.8261, IoU.background: 0.9991, IoU.scratch: 0.8294, IoU.stain: 0.8903, IoU.edgeDamage: 0.8275, VOE.background: 0.7046, VOE.scratch: 0.8743, VOE.stain: 0.8134, VOE.edgeDamage: 0.8762, ASD.background: 0.7080, ASD.scratch: 0.7219, ASD.stain: 0.7163, ASD.edgeDamage: 0.7232, MSSD.background: 0.7039, MSSD.scratch: 0.7733, MSSD.stain: 0.7457, MSSD.edgeDamage: 0.7800, Acc.background: 0.9989, Acc.scratch: 0.6867, Acc.stain: 0.8110, Acc.edgeDamage: 0.8343, Fscore.background: 0.9993, Fscore.scratch: 0.8203, Fscore.stain: 0.8991, Fscore.edgeDamage: 0.8176, Precision.background: 0.9994, Precision.scratch: 0.8576, Precision.stain: 0.9284, Precision.edgeDamage: 0.7711, Recall.background: 0.9993, Recall.scratch: 0.7911, Recall.stain: 0.8740, Recall.edgeDamage: 0.8895, Dice.background: 0.9990, Dice.scratch: 0.7304, Dice.stain: 0.8486, Dice.edgeDamage: 0.7264
2023-11-22 15:12:06,789 - mmseg - INFO - Iter [2050/10000]	lr: 8.322e-05, eta: 0:46:21, time: 0.743, data_time: 0.545, memory: 7716, decode.loss_focal: 0.0009, decode.loss_dice: 0.2071, decode.acc_seg: 99.7000, loss: 0.2080
2023-11-22 15:12:23,758 - mmseg - INFO - Iter [2100/10000]	lr: 8.280e-05, eta: 0:46:01, time: 0.339, data_time: 0.164, memory: 7716, decode.loss_focal: 0.0009, decode.loss_dice: 0.2235, decode.acc_seg: 99.6830, loss: 0.2244
2023-11-22 15:12:38,207 - mmseg - INFO - Iter [2150/10000]	lr: 8.239e-05, eta: 0:45:33, time: 0.289, data_time: 0.148, memory: 7716, decode.loss_focal: 0.0010, decode.loss_dice: 0.2388, decode.acc_seg: 99.6360, loss: 0.2398
2023-11-22 15:12:54,866 - mmseg - INFO - Iter [2200/10000]	lr: 8.197e-05, eta: 0:45:13, time: 0.333, data_time: 0.163, memory: 7716, decode.loss_focal: 0.0010, decode.loss_dice: 0.2306, decode.acc_seg: 99.6384, loss: 0.2316
