{"env_info": "sys.platform: linux\nPython: 3.8.18 (default, Sep 11 2023, 13:40:15) [GCC 11.2.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3090\nCUDA_HOME: /environment/miniconda3\nNVCC: Cuda compilation tools, release 11.8, V11.8.89\nGCC: gcc (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0\nPyTorch: 1.11.0+cu113\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.3\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.2\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.12.0+cu113\nOpenCV: 4.8.1\nMMCV: 1.7.0\nMMCV Compiler: GCC 9.3\nMMCV CUDA Compiler: 11.3\nMMSegmentation: 0.29.1+", "seed": 204730028, "exp_name": "unet_all.py", "mmseg_version": "0.29.1+", "config": "norm_cfg = dict(type='BN', requires_grad=True)\nbackbone_norm_cfg = dict(type='LN', requires_grad=True)\nmodel = dict(\n    type='EncoderDecoder',\n    pretrained=None,\n    backbone=dict(\n        type='UnetBackbone',\n        in_channels=3,\n        context_layer='seLayer',\n        conv_down=True,\n        channel_list=[64, 128, 256, 512]),\n    decode_head=dict(\n        type='UnetHead',\n        num_classes=4,\n        channels=64,\n        threshold=0.2,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        loss_decode=[\n            dict(\n                type='FocalLoss',\n                use_sigmoid=True,\n                gamma=2.0,\n                alpha=0.25,\n                class_weight=[0.1, 0.5, 0.2, 0.2],\n                loss_weight=2.0),\n            dict(\n                type='DiceLoss',\n                loss_name='loss_dice',\n                class_weight=[0.1, 0.5, 0.2, 0.2],\n                loss_weight=2.0)\n        ]))\ntrain_cfg = dict()\ntest_cfg = dict(mode='whole')\ndataset_type = 'MyDataset'\ncrop_size = (512, 512)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations'),\n    dict(type='Resize', img_scale=(600, 600)),\n    dict(type='RandomCrop', crop_size=(512, 512), cat_max_ratio=0.75),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(type='Normalize', mean=[0, 0, 0], std=[1, 1, 1], to_rgb=True),\n    dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(512, 512),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=False),\n            dict(type='Normalize', mean=[0, 0, 0], std=[1, 1, 1], to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata_root = './datasets/'\ndata = dict(\n    samples_per_gpu=5,\n    workers_per_gpu=2,\n    train=dict(\n        type='MyDataset',\n        data_root='./datasets/',\n        img_dir='train/images',\n        ann_dir='train/labels',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations'),\n            dict(type='Resize', img_scale=(600, 600)),\n            dict(type='RandomCrop', crop_size=(512, 512), cat_max_ratio=0.75),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(type='PhotoMetricDistortion'),\n            dict(type='Normalize', mean=[0, 0, 0], std=[1, 1, 1], to_rgb=True),\n            dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n        ]),\n    val=dict(\n        type='MyDataset',\n        data_root='./datasets/',\n        img_dir='test/images',\n        ann_dir='test/labels',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(512, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=False),\n                    dict(\n                        type='Normalize',\n                        mean=[0, 0, 0],\n                        std=[1, 1, 1],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='MyDataset',\n        data_root='./datasets/',\n        img_dir='test/images',\n        ann_dir='test/labels',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(512, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=False),\n                    dict(\n                        type='Normalize',\n                        mean=[0, 0, 0],\n                        std=[1, 1, 1],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    interval=50,\n    hooks=[\n        dict(type='TensorboardLoggerHook'),\n        dict(type='TextLoggerHook', by_epoch=False)\n    ])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = False\noptimizer = dict(type='Adam', lr=0.0001, betas=(0.9, 0.999))\noptimizer_config = dict()\nlr_config = dict(policy='poly', power=0.9, min_lr=1e-05, by_epoch=False)\nrunner = dict(type='IterBasedRunner', max_iters=10000)\ncheckpoint_config = dict(by_epoch=False, save_optimizer=False, interval=5000)\nevaluation = dict(interval=500, metric=['mIoU', 'mFscore', 'mDice'])\nwork_dir = './work_dirs/unet_all'\ngpu_ids = [0]\nauto_resume = False\ndevice = 'cuda'\nseed = 204730028\n", "CLASSES": ["background", "scratch", "stain", "edgeDamage"], "PALETTE": [[0, 0, 0], [1, 1, 1], [2, 2, 2], [3, 3, 3]]}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.0001, "memory": 19854, "data_time": 0.01652, "decode.loss_focal": 0.04241, "decode.loss_dice": 0.46247, "decode.acc_seg": 96.366, "loss": 0.50488, "time": 0.58423}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.0001, "memory": 19854, "data_time": 0.05807, "decode.loss_focal": 0.01951, "decode.loss_dice": 0.44788, "decode.acc_seg": 99.5963, "loss": 0.46739, "time": 0.62345}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 0.0001, "memory": 19854, "data_time": 0.00417, "decode.loss_focal": 0.01074, "decode.loss_dice": 0.43417, "decode.acc_seg": 99.58022, "loss": 0.44491, "time": 0.57}
{"mode": "train", "epoch": 3, "iter": 200, "lr": 0.0001, "memory": 19854, "data_time": 0.05522, "decode.loss_focal": 0.00586, "decode.loss_dice": 0.40777, "decode.acc_seg": 99.32549, "loss": 0.41363, "time": 0.62149}
{"mode": "train", "epoch": 3, "iter": 250, "lr": 0.0001, "memory": 19854, "data_time": 0.00416, "decode.loss_focal": 0.00354, "decode.loss_dice": 0.38631, "decode.acc_seg": 99.41419, "loss": 0.38986, "time": 0.57259}
{"mode": "train", "epoch": 4, "iter": 300, "lr": 0.0001, "memory": 19854, "data_time": 0.0563, "decode.loss_focal": 0.00251, "decode.loss_dice": 0.35979, "decode.acc_seg": 99.5083, "loss": 0.3623, "time": 0.62373}
{"mode": "train", "epoch": 4, "iter": 350, "lr": 0.0001, "memory": 19854, "data_time": 0.00425, "decode.loss_focal": 0.00194, "decode.loss_dice": 0.34776, "decode.acc_seg": 99.53595, "loss": 0.3497, "time": 0.57094}
{"mode": "train", "epoch": 5, "iter": 400, "lr": 0.0001, "memory": 19854, "data_time": 0.05578, "decode.loss_focal": 0.00161, "decode.loss_dice": 0.32245, "decode.acc_seg": 99.56667, "loss": 0.32406, "time": 0.62302}
{"mode": "train", "epoch": 5, "iter": 450, "lr": 0.0001, "memory": 19854, "data_time": 0.00454, "decode.loss_focal": 0.00138, "decode.loss_dice": 0.32485, "decode.acc_seg": 99.58683, "loss": 0.32623, "time": 0.57292}
{"mode": "train", "epoch": 6, "iter": 500, "lr": 0.0001, "memory": 19854, "data_time": 0.05745, "decode.loss_focal": 0.00126, "decode.loss_dice": 0.3137, "decode.acc_seg": 99.61088, "loss": 0.31496, "time": 0.62552}
{"mode": "val", "epoch": 6, "iter": 105, "lr": 0.0001, "aAcc": 0.9989, "mIoU": 0.8363, "mVOE": 0.8674, "mASD": 0.7301, "mMSSD": 0.7528, "mAcc": 0.6681, "mFscore": 0.8684, "mPrecision": 0.8878, "mRecall": 0.7787, "mDice": 0.6853, "IoU.background": 0.9989, "IoU.scratch": 0.7847, "IoU.stain": 0.8577, "IoU.edgeDamage": 0.7037, "VOE.background": 0.7048, "VOE.scratch": 0.919, "VOE.stain": 0.846, "VOE.edgeDamage": 1.0, "ASD.background": 0.7204, "ASD.scratch": 0.7389, "ASD.stain": 0.7311, "ASD.edgeDamage": NaN, "MSSD.background": 0.7041, "MSSD.scratch": 0.7965, "MSSD.stain": 0.7577, "MSSD.edgeDamage": NaN, "Acc.background": 0.9994, "Acc.scratch": 0.5825, "Acc.stain": 0.757, "Acc.edgeDamage": 0.3333, "Fscore.background": 0.9992, "Fscore.scratch": 0.7464, "Fscore.stain": 0.8596, "Fscore.edgeDamage": NaN, "Precision.background": 0.9988, "Precision.scratch": 0.7799, "Precision.stain": 0.8847, "Precision.edgeDamage": NaN, "Recall.background": 0.9996, "Recall.scratch": 0.7217, "Recall.stain": 0.838, "Recall.edgeDamage": 0.5556, "Dice.background": 0.9988, "Dice.scratch": 0.6196, "Dice.stain": 0.7893, "Dice.edgeDamage": 0.3333}
{"mode": "train", "epoch": 6, "iter": 550, "lr": 0.0001, "memory": 19854, "data_time": 0.50716, "decode.loss_focal": 0.0012, "decode.loss_dice": 0.28581, "decode.acc_seg": 99.63775, "loss": 0.28701, "time": 1.07278}
{"mode": "train", "epoch": 7, "iter": 600, "lr": 0.0001, "memory": 19854, "data_time": 0.05535, "decode.loss_focal": 0.00126, "decode.loss_dice": 0.28341, "decode.acc_seg": 99.59834, "loss": 0.28467, "time": 0.62254}
{"mode": "train", "epoch": 7, "iter": 650, "lr": 9e-05, "memory": 19854, "data_time": 0.00423, "decode.loss_focal": 0.00109, "decode.loss_dice": 0.27893, "decode.acc_seg": 99.67459, "loss": 0.28002, "time": 0.57132}
{"mode": "train", "epoch": 8, "iter": 700, "lr": 9e-05, "memory": 19854, "data_time": 0.05753, "decode.loss_focal": 0.00114, "decode.loss_dice": 0.28076, "decode.acc_seg": 99.62167, "loss": 0.2819, "time": 0.62473}
{"mode": "train", "epoch": 8, "iter": 750, "lr": 9e-05, "memory": 19854, "data_time": 0.00434, "decode.loss_focal": 0.00102, "decode.loss_dice": 0.2729, "decode.acc_seg": 99.66933, "loss": 0.27392, "time": 0.57175}
{"mode": "train", "epoch": 9, "iter": 800, "lr": 9e-05, "memory": 19854, "data_time": 0.05647, "decode.loss_focal": 0.00099, "decode.loss_dice": 0.26575, "decode.acc_seg": 99.67555, "loss": 0.26674, "time": 0.6239}
{"mode": "train", "epoch": 10, "iter": 850, "lr": 9e-05, "memory": 19854, "data_time": 0.05567, "decode.loss_focal": 0.00107, "decode.loss_dice": 0.27212, "decode.acc_seg": 99.63408, "loss": 0.27319, "time": 0.62273}
{"mode": "train", "epoch": 10, "iter": 900, "lr": 9e-05, "memory": 19854, "data_time": 0.00439, "decode.loss_focal": 0.00093, "decode.loss_dice": 0.25503, "decode.acc_seg": 99.67028, "loss": 0.25596, "time": 0.57219}
{"mode": "train", "epoch": 11, "iter": 950, "lr": 9e-05, "memory": 19854, "data_time": 0.05558, "decode.loss_focal": 0.00107, "decode.loss_dice": 0.2718, "decode.acc_seg": 99.6233, "loss": 0.27288, "time": 0.62296}
{"mode": "train", "epoch": 11, "iter": 1000, "lr": 9e-05, "memory": 19854, "data_time": 0.00434, "decode.loss_focal": 0.0009, "decode.loss_dice": 0.26389, "decode.acc_seg": 99.68967, "loss": 0.26478, "time": 0.57232}
{"mode": "val", "epoch": 11, "iter": 105, "lr": 9e-05, "aAcc": 0.999, "mIoU": 0.8422, "mVOE": 0.8615, "mASD": 0.73, "mMSSD": 0.7524, "mAcc": 0.6694, "mFscore": 0.8758, "mPrecision": 0.9167, "mRecall": 0.7796, "mDice": 0.6936, "IoU.background": 0.999, "IoU.scratch": 0.7756, "IoU.stain": 0.8903, "IoU.edgeDamage": 0.7037, "VOE.background": 0.7047, "VOE.scratch": 0.9281, "VOE.stain": 0.8134, "VOE.edgeDamage": 1.0, "ASD.background": 0.7204, "ASD.scratch": 0.7415, "ASD.stain": 0.7282, "ASD.edgeDamage": NaN, "MSSD.background": 0.7041, "MSSD.scratch": 0.8097, "MSSD.stain": 0.7433, "MSSD.edgeDamage": NaN, "Acc.background": 0.9997, "Acc.scratch": 0.523, "Acc.stain": 0.8217, "Acc.edgeDamage": 0.3333, "Fscore.background": 0.9993, "Fscore.scratch": 0.7291, "Fscore.stain": 0.899, "Fscore.edgeDamage": NaN, "Precision.background": 0.9987, "Precision.scratch": 0.8322, "Precision.stain": 0.919, "Precision.edgeDamage": NaN, "Recall.background": 0.9998, "Recall.scratch": 0.682, "Recall.stain": 0.8811, "Recall.edgeDamage": 0.5556, "Dice.background": 0.9989, "Dice.scratch": 0.5937, "Dice.stain": 0.8485, "Dice.edgeDamage": 0.3333}
{"mode": "train", "epoch": 12, "iter": 1050, "lr": 9e-05, "memory": 19854, "data_time": 0.54335, "decode.loss_focal": 0.00093, "decode.loss_dice": 0.26529, "decode.acc_seg": 99.66889, "loss": 0.26621, "time": 1.10708}
{"mode": "train", "epoch": 12, "iter": 1100, "lr": 9e-05, "memory": 19854, "data_time": 0.00404, "decode.loss_focal": 0.00092, "decode.loss_dice": 0.25307, "decode.acc_seg": 99.6645, "loss": 0.25399, "time": 0.56856}
{"mode": "train", "epoch": 13, "iter": 1150, "lr": 9e-05, "memory": 19854, "data_time": 0.05771, "decode.loss_focal": 0.00091, "decode.loss_dice": 0.26091, "decode.acc_seg": 99.65468, "loss": 0.26182, "time": 0.62265}
{"mode": "train", "epoch": 13, "iter": 1200, "lr": 9e-05, "memory": 19854, "data_time": 0.00434, "decode.loss_focal": 0.00083, "decode.loss_dice": 0.24262, "decode.acc_seg": 99.67473, "loss": 0.24346, "time": 0.57036}
{"mode": "train", "epoch": 14, "iter": 1250, "lr": 9e-05, "memory": 19854, "data_time": 0.05671, "decode.loss_focal": 0.00083, "decode.loss_dice": 0.25321, "decode.acc_seg": 99.68124, "loss": 0.25404, "time": 0.62233}
{"mode": "train", "epoch": 14, "iter": 1300, "lr": 9e-05, "memory": 19854, "data_time": 0.00432, "decode.loss_focal": 0.00093, "decode.loss_dice": 0.25437, "decode.acc_seg": 99.65296, "loss": 0.2553, "time": 0.56982}
{"mode": "train", "epoch": 15, "iter": 1350, "lr": 9e-05, "memory": 19854, "data_time": 0.05636, "decode.loss_focal": 0.0008, "decode.loss_dice": 0.24407, "decode.acc_seg": 99.69321, "loss": 0.24487, "time": 0.62279}
{"mode": "train", "epoch": 15, "iter": 1400, "lr": 9e-05, "memory": 19854, "data_time": 0.00432, "decode.loss_focal": 0.00085, "decode.loss_dice": 0.25104, "decode.acc_seg": 99.67325, "loss": 0.25189, "time": 0.57003}
{"mode": "train", "epoch": 16, "iter": 1450, "lr": 9e-05, "memory": 19854, "data_time": 0.05639, "decode.loss_focal": 0.00081, "decode.loss_dice": 0.2622, "decode.acc_seg": 99.68468, "loss": 0.26301, "time": 0.62184}
{"mode": "train", "epoch": 16, "iter": 1500, "lr": 9e-05, "memory": 19854, "data_time": 0.00423, "decode.loss_focal": 0.00081, "decode.loss_dice": 0.23474, "decode.acc_seg": 99.683, "loss": 0.23555, "time": 0.57036}
{"mode": "val", "epoch": 16, "iter": 105, "lr": 9e-05, "aAcc": 0.9991, "mIoU": 0.85, "mVOE": 0.8537, "mASD": 0.7287, "mMSSD": 0.7457, "mAcc": 0.692, "mFscore": 0.8941, "mPrecision": 0.9196, "mRecall": 0.7946, "mDice": 0.7142, "IoU.background": 0.9991, "IoU.scratch": 0.8044, "IoU.stain": 0.8929, "IoU.edgeDamage": 0.7037, "VOE.background": 0.7046, "VOE.scratch": 0.8994, "VOE.stain": 0.8108, "VOE.edgeDamage": 1.0, "ASD.background": 0.7204, "ASD.scratch": 0.737, "ASD.stain": 0.7287, "ASD.edgeDamage": NaN, "MSSD.background": 0.7041, "MSSD.scratch": 0.7871, "MSSD.stain": 0.7459, "MSSD.edgeDamage": NaN, "Acc.background": 0.9996, "Acc.scratch": 0.6246, "Acc.stain": 0.8103, "Acc.edgeDamage": 0.3333, "Fscore.background": 0.9993, "Fscore.scratch": 0.7809, "Fscore.stain": 0.902, "Fscore.edgeDamage": NaN, "Precision.background": 0.9989, "Precision.scratch": 0.8241, "Precision.stain": 0.936, "Precision.edgeDamage": NaN, "Recall.background": 0.9997, "Recall.scratch": 0.7498, "Recall.stain": 0.8735, "Recall.edgeDamage": 0.5556, "Dice.background": 0.9989, "Dice.scratch": 0.6714, "Dice.stain": 0.853, "Dice.edgeDamage": 0.3333}
